
DS1306_write_read_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000354a  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f8d  00000000  00000000  0000385a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005a5  00000000  00000000  000067e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00006d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000186b  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000171  00000000  00000000  00008693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00008804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 86 00 	call	0x10c	; 0x10c <main>
 104:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <main>:
#include "DS1306_RTC_drivers.h"

int main(void)
{
	
	SPI_rtc_ds1306_config();
 10c:	0e 94 b6 00 	call	0x16c	; 0x16c <SPI_rtc_ds1306_config>
	
	while (1)
	{
		write_read_RTC_test();
 110:	0e 94 c6 00 	call	0x18c	; 0x18c <write_read_RTC_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	97 e2       	ldi	r25, 0x27	; 39
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0xc>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x12>
 11e:	00 00       	nop
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x4>

00000122 <write_RTC>:
// data (data_RTC). In the DS1306 data sheet this operation is called an SPI
// single-byte write.
//**************************************************************************
void write_RTC (unsigned char reg_RTC, unsigned char data_RTC)
{
	PORTC.OUT |= PIN1_bm;
 122:	e0 e4       	ldi	r30, 0x40	; 64
 124:	f4 e0       	ldi	r31, 0x04	; 4
 126:	94 81       	ldd	r25, Z+4	; 0x04
 128:	92 60       	ori	r25, 0x02	; 2
 12a:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	95 e0       	ldi	r25, 0x05	; 5
 12e:	9a 95       	dec	r25
 130:	f1 f7       	brne	.-4      	; 0x12e <write_RTC+0xc>
 132:	00 00       	nop
	_delay_us(4);
	SPI0.DATA = reg_RTC;
 134:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while ((SPI0.INTFLAGS & PIN7_bm) == 0x00) {}
 138:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 13c:	88 23       	and	r24, r24
 13e:	e4 f7       	brge	.-8      	; 0x138 <write_RTC+0x16>
	SPI0.DATA = data_RTC;
 140:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while ((SPI0.INTFLAGS & PIN7_bm) == 0x00) {}
 144:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 148:	88 23       	and	r24, r24
 14a:	e4 f7       	brge	.-8      	; 0x144 <write_RTC+0x22>
	PORTC.OUT &= ~PIN1_bm;
 14c:	e0 e4       	ldi	r30, 0x40	; 64
 14e:	f4 e0       	ldi	r31, 0x04	; 4
 150:	84 81       	ldd	r24, Z+4	; 0x04
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	84 83       	std	Z+4, r24	; 0x04
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <write_RTC+0x36>
 15c:	00 00       	nop
 15e:	08 95       	ret

00000160 <read_RTC>:
// byte to generate the SCLKs to read the data (data_RTC). In the DS1306 data
// sheet this operation is called am SPI single-byte read.
//**************************************************************************
unsigned char read_RTC (unsigned char reg_RTC)
{
	write_RTC(reg_RTC, 0x00);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	0e 94 91 00 	call	0x122	; 0x122 <write_RTC>
	return SPI0.DATA;
 166:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
}
 16a:	08 95       	ret

0000016c <SPI_rtc_ds1306_config>:
// select the ds_1306. SCLK is operated a the maximum possible frequency for
// the ds1306.
//******************************************************************************
void SPI_rtc_ds1306_config(void)
{
	PORTC.DIR = PIN1_bm;
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	PORTA.DIRSET = PIN4_bm | PIN6_bm;
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	80 e5       	ldi	r24, 0x50	; 80
 178:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR = PIN5_bm;
 17a:	80 e2       	ldi	r24, 0x20	; 32
 17c:	82 83       	std	Z+2, r24	; 0x02
	SPI0.CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm; 
 17e:	e0 e4       	ldi	r30, 0x40	; 64
 180:	f9 e0       	ldi	r31, 0x09	; 9
 182:	81 e2       	ldi	r24, 0x21	; 33
 184:	80 83       	st	Z, r24
	SPI0.CTRLB = SPI_SSD_bm | SPI_MODE_3_gc;
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	81 83       	std	Z+1, r24	; 0x01
 18a:	08 95       	ret

0000018c <write_read_RTC_test>:
// just written and places the result in a global array named RTC_byte[]. The
// function repeats this write/read sequence 10 times. The locations written are
// 0xA0 through 0xA9 and the corresponding locations read are 0x20 through 0x29.
//**************************************************************************
void write_read_RTC_test(void)
{
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
 19c:	2a 97       	sbiw	r28, 0x0a	; 10
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	de bf       	out	0x3e, r29	; 62
	volatile uint8_t RTC_byte[10];
	uint8_t i = 0x00;
	write_RTC(CTRL_REG_WRITE, 0x00);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	8f e8       	ldi	r24, 0x8F	; 143
 1a6:	0e 94 91 00 	call	0x122	; 0x122 <write_RTC>
// 0xA0 through 0xA9 and the corresponding locations read are 0x20 through 0x29.
//**************************************************************************
void write_read_RTC_test(void)
{
	volatile uint8_t RTC_byte[10];
	uint8_t i = 0x00;
 1aa:	10 e0       	ldi	r17, 0x00	; 0
	write_RTC(CTRL_REG_WRITE, 0x00);
	for (; i < 0x0A; ++i)
 1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <write_read_RTC_test+0x4a>
	{
		write_RTC((RAM_BEGIN + i) | 0x80, 'U');
 1ae:	00 e2       	ldi	r16, 0x20	; 32
 1b0:	01 0f       	add	r16, r17
 1b2:	65 e5       	ldi	r22, 0x55	; 85
 1b4:	80 2f       	mov	r24, r16
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 91 00 	call	0x122	; 0x122 <write_RTC>
		RTC_byte[i] = read_RTC(RAM_BEGIN + i);
 1bc:	e1 2e       	mov	r14, r17
 1be:	f1 2c       	mov	r15, r1
 1c0:	80 2f       	mov	r24, r16
 1c2:	0e 94 b0 00 	call	0x160	; 0x160 <read_RTC>
 1c6:	e1 e0       	ldi	r30, 0x01	; 1
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	ec 0f       	add	r30, r28
 1cc:	fd 1f       	adc	r31, r29
 1ce:	ee 0d       	add	r30, r14
 1d0:	ff 1d       	adc	r31, r15
 1d2:	80 83       	st	Z, r24
void write_read_RTC_test(void)
{
	volatile uint8_t RTC_byte[10];
	uint8_t i = 0x00;
	write_RTC(CTRL_REG_WRITE, 0x00);
	for (; i < 0x0A; ++i)
 1d4:	1f 5f       	subi	r17, 0xFF	; 255
 1d6:	1a 30       	cpi	r17, 0x0A	; 10
 1d8:	50 f3       	brcs	.-44     	; 0x1ae <write_read_RTC_test+0x22>
	{
		write_RTC((RAM_BEGIN + i) | 0x80, 'U');
		RTC_byte[i] = read_RTC(RAM_BEGIN + i);
	}
}
 1da:	2a 96       	adiw	r28, 0x0a	; 10
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
