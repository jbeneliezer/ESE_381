
DS1306_block_write_read_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000322  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00804000  00804000  00000322  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000322  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000037e9  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f8d  00000000  00000000  00003bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cf  00000000  00000000  00006b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  0000714c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001879  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000307  00000000  00000000  00008a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	ae 30       	cpi	r26, 0x0E	; 14
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
 114:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <write_RTC>:
	for (; i < 0x0A; ++i)
	{
		write_RTC((RAM_BEGIN + i) | 0x80, 'U');
		RTC_byte[i] = read_RTC(RAM_BEGIN + i);
	}
}
 11c:	e0 e4       	ldi	r30, 0x40	; 64
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	94 81       	ldd	r25, Z+4	; 0x04
 122:	92 60       	ori	r25, 0x02	; 2
 124:	94 83       	std	Z+4, r25	; 0x04
 126:	95 e0       	ldi	r25, 0x05	; 5
 128:	9a 95       	dec	r25
 12a:	f1 f7       	brne	.-4      	; 0x128 <write_RTC+0xc>
 12c:	00 00       	nop
 12e:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 132:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 136:	88 23       	and	r24, r24
 138:	e4 f7       	brge	.-8      	; 0x132 <write_RTC+0x16>
 13a:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 13e:	e0 e4       	ldi	r30, 0x40	; 64
 140:	f4 e0       	ldi	r31, 0x04	; 4
 142:	84 81       	ldd	r24, Z+4	; 0x04
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	84 83       	std	Z+4, r24	; 0x04
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <write_RTC+0x2e>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <block_write_RTC>:
 152:	fc 01       	movw	r30, r24
 154:	a0 e4       	ldi	r26, 0x40	; 64
 156:	b4 e0       	ldi	r27, 0x04	; 4
 158:	14 96       	adiw	r26, 0x04	; 4
 15a:	8c 91       	ld	r24, X
 15c:	14 97       	sbiw	r26, 0x04	; 4
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	14 96       	adiw	r26, 0x04	; 4
 162:	8c 93       	st	X, r24
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	8a 95       	dec	r24
 168:	f1 f7       	brne	.-4      	; 0x166 <block_write_RTC+0x14>
 16a:	00 00       	nop
 16c:	60 68       	ori	r22, 0x80	; 128
 16e:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 172:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 176:	99 23       	and	r25, r25
 178:	e4 f7       	brge	.-8      	; 0x172 <block_write_RTC+0x20>
 17a:	80 81       	ld	r24, Z
 17c:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 180:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 184:	99 23       	and	r25, r25
 186:	e4 f7       	brge	.-8      	; 0x180 <block_write_RTC+0x2e>
 188:	08 c0       	rjmp	.+16     	; 0x19a <block_write_RTC+0x48>
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 190:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 194:	99 23       	and	r25, r25
 196:	e4 f7       	brge	.-8      	; 0x190 <block_write_RTC+0x3e>
 198:	4f 5f       	subi	r20, 0xFF	; 255
 19a:	42 30       	cpi	r20, 0x02	; 2
 19c:	b0 f7       	brcc	.-20     	; 0x18a <block_write_RTC+0x38>
 19e:	e0 e4       	ldi	r30, 0x40	; 64
 1a0:	f4 e0       	ldi	r31, 0x04	; 4
 1a2:	84 81       	ldd	r24, Z+4	; 0x04
 1a4:	8d 7f       	andi	r24, 0xFD	; 253
 1a6:	84 83       	std	Z+4, r24	; 0x04
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	8a 95       	dec	r24
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <block_write_RTC+0x58>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <block_read_RTC>:
 1b2:	dc 01       	movw	r26, r24
 1b4:	e0 e4       	ldi	r30, 0x40	; 64
 1b6:	f4 e0       	ldi	r31, 0x04	; 4
 1b8:	84 81       	ldd	r24, Z+4	; 0x04
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	84 83       	std	Z+4, r24	; 0x04
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <block_read_RTC+0xe>
 1c4:	00 00       	nop
 1c6:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1ca:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1ce:	99 23       	and	r25, r25
 1d0:	e4 f7       	brge	.-8      	; 0x1ca <block_read_RTC+0x18>
 1d2:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1d6:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1da:	99 23       	and	r25, r25
 1dc:	e4 f7       	brge	.-8      	; 0x1d6 <block_read_RTC+0x24>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <block_read_RTC+0x4a>
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	29 0f       	add	r18, r25
 1e6:	fd 01       	movw	r30, r26
 1e8:	e9 0f       	add	r30, r25
 1ea:	f1 1d       	adc	r31, r1
 1ec:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1f0:	90 83       	st	Z, r25
 1f2:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1f6:	99 23       	and	r25, r25
 1f8:	e4 f7       	brge	.-8      	; 0x1f2 <block_read_RTC+0x40>
 1fa:	92 2f       	mov	r25, r18
 1fc:	94 17       	cp	r25, r20
 1fe:	88 f3       	brcs	.-30     	; 0x1e2 <block_read_RTC+0x30>
 200:	e0 e4       	ldi	r30, 0x40	; 64
 202:	f4 e0       	ldi	r31, 0x04	; 4
 204:	84 81       	ldd	r24, Z+4	; 0x04
 206:	8d 7f       	andi	r24, 0xFD	; 253
 208:	84 83       	std	Z+4, r24	; 0x04
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 210:	00 00       	nop
 212:	08 95       	ret

00000214 <SPI_rtc_ds1306_config>:
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
 21a:	80 e5       	ldi	r24, 0x50	; 80
 21c:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
 220:	e0 e4       	ldi	r30, 0x40	; 64
 222:	f9 e0       	ldi	r31, 0x09	; 9
 224:	81 e2       	ldi	r24, 0x21	; 33
 226:	80 83       	st	Z, r24
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	81 83       	std	Z+1, r24	; 0x01
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	8f e8       	ldi	r24, 0x8F	; 143
 230:	0e 94 8e 00 	call	0x11c	; 0x11c <write_RTC>
 234:	08 95       	ret

00000236 <block_write_read_RTC_test>:
// function repeats this write/read sequence 10 times. The locations written are
// 0xA0 through 0xA9 and the corresponding locations read are 0x20 through 0x29.
//**************************************************************************
void block_write_read_RTC_test(void)
{
	write_RTC(CTRL_REG_WRITE, 0x00);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	8f e8       	ldi	r24, 0x8F	; 143
 23a:	0e 94 8e 00 	call	0x11c	; 0x11c <write_RTC>
	block_read_RTC(RTC_time_date_read, 0x00, 7);
 23e:	47 e0       	ldi	r20, 0x07	; 7
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e4       	ldi	r25, 0x40	; 64
 246:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <block_read_RTC>
	memcpy(RTC_time_date_write, RTC_time_date_read, sizeof(RTC_time_date_read));
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	f0 e4       	ldi	r31, 0x40	; 64
 250:	a7 e0       	ldi	r26, 0x07	; 7
 252:	b0 e4       	ldi	r27, 0x40	; 64
 254:	01 90       	ld	r0, Z+
 256:	0d 92       	st	X+, r0
 258:	8a 95       	dec	r24
 25a:	e1 f7       	brne	.-8      	; 0x254 <block_write_read_RTC_test+0x1e>
	block_write_RTC(RTC_time_date_write, 0x00, 7);
 25c:	47 e0       	ldi	r20, 0x07	; 7
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	90 e4       	ldi	r25, 0x40	; 64
 264:	0e 94 a9 00 	call	0x152	; 0x152 <block_write_RTC>
	while (1)
	{
		block_read_RTC(RTC_time_date_read, 0x00, 7);
 268:	47 e0       	ldi	r20, 0x07	; 7
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e4       	ldi	r25, 0x40	; 64
 270:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <block_read_RTC>
		memcpy(RTC_time_date_write, RTC_time_date_read, sizeof(RTC_time_date_read));
 274:	87 e0       	ldi	r24, 0x07	; 7
 276:	e0 e0       	ldi	r30, 0x00	; 0
 278:	f0 e4       	ldi	r31, 0x40	; 64
 27a:	a7 e0       	ldi	r26, 0x07	; 7
 27c:	b0 e4       	ldi	r27, 0x40	; 64
 27e:	01 90       	ld	r0, Z+
 280:	0d 92       	st	X+, r0
 282:	8a 95       	dec	r24
 284:	e1 f7       	brne	.-8      	; 0x27e <block_write_read_RTC_test+0x48>
		block_write_RTC(RTC_time_date_write, 0x00, 7);	
 286:	47 e0       	ldi	r20, 0x07	; 7
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	87 e0       	ldi	r24, 0x07	; 7
 28c:	90 e4       	ldi	r25, 0x40	; 64
 28e:	0e 94 a9 00 	call	0x152	; 0x152 <block_write_RTC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	97 e2       	ldi	r25, 0x27	; 39
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <block_write_read_RTC_test+0x60>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <block_write_read_RTC_test+0x66>
 29c:	00 00       	nop
 29e:	e4 cf       	rjmp	.-56     	; 0x268 <block_write_read_RTC_test+0x32>

000002a0 <main>:


int main(void)
{

	SPI_rtc_ds1306_config();
 2a0:	0e 94 0a 01 	call	0x214	; 0x214 <SPI_rtc_ds1306_config>

	block_write_read_RTC_test();
 2a4:	0e 94 1b 01 	call	0x236	; 0x236 <block_write_read_RTC_test>
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <main+0x8>

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
