
USART3_loopback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00804000  00804000  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003217  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dd6  00000000  00000000  000034eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a2  00000000  00000000  000062c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00006664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001892  00000000  00000000  000066ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00007f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00007f87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_53>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a1 30       	cpi	r26, 0x01	; 1
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
 114:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <main>:
char c;

int main(void)
{

	USART3.BAUD = BAUD_RATE;																							// set baud rate.
 11c:	e0 e6       	ldi	r30, 0x60	; 96
 11e:	f8 e0       	ldi	r31, 0x08	; 8
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	95 e2       	ldi	r25, 0x25	; 37
 124:	80 87       	std	Z+8, r24	; 0x08
 126:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;	// Asynchronous mode, no parity bits, single stop bit, 8 bits data.
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	87 83       	std	Z+7, r24	; 0x07
	USART3.CTRLB = USART_TXEN_bm | USART_RXEN_bm;																		// enable transmission, enable receiving.
 12c:	80 ec       	ldi	r24, 0xC0	; 192
 12e:	86 83       	std	Z+6, r24	; 0x06
	USART3.CTRLA = USART_RXCIE_bm;																						// enable RX complete interrupt.
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	85 83       	std	Z+5, r24	; 0x05
	
	sei();
 134:	78 94       	sei

	c = 'A';
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <_edata>
	
	while ((USART3.STATUS & USART_DREIF_bm) != USART_DREIF_bm){}														// wait till buffer is empty.
 13c:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 140:	85 ff       	sbrs	r24, 5
 142:	fc cf       	rjmp	.-8      	; 0x13c <main+0x20>
	USART3.TXDATAL = c;																									// transmit c
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x2e>

0000014c <__vector_53>:
	while (1)
	{
	}
}

ISR (USART3_RXC_vect) {
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	if ((USART3.STATUS & USART_RXCIF_bm) == USART_RXCIF_bm) {
 15a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 15e:	88 23       	and	r24, r24
 160:	4c f5       	brge	.+82     	; 0x1b4 <__vector_53+0x68>
		if (USART3.RXDATAH != 0x00) return;
 162:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <__TEXT_REGION_LENGTH__+0x7e0861>
 166:	81 11       	cpse	r24, r1
 168:	25 c0       	rjmp	.+74     	; 0x1b4 <__vector_53+0x68>
		c = USART3.RXDATAL;
 16a:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
 16e:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <_edata>

		if (c >= 'A' && c <= 'Z') {
 172:	8f eb       	ldi	r24, 0xBF	; 191
 174:	89 0f       	add	r24, r25
 176:	8a 31       	cpi	r24, 0x1A	; 26
 178:	40 f4       	brcc	.+16     	; 0x18a <__vector_53+0x3e>
			while ((USART3.STATUS & USART_DREIF_bm) != USART_DREIF_bm){}												// wait till buffer is empty.
 17a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 17e:	85 ff       	sbrs	r24, 5
 180:	fc cf       	rjmp	.-8      	; 0x17a <__vector_53+0x2e>
			USART3.TXDATAL = c + 20;																					// send lowercase character.
 182:	9c 5e       	subi	r25, 0xEC	; 236
 184:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 188:	15 c0       	rjmp	.+42     	; 0x1b4 <__vector_53+0x68>
		} else if (c >= 'a' && c < 'z') {
 18a:	8f e9       	ldi	r24, 0x9F	; 159
 18c:	89 0f       	add	r24, r25
 18e:	89 31       	cpi	r24, 0x19	; 25
 190:	40 f4       	brcc	.+16     	; 0x1a2 <__vector_53+0x56>
			while ((USART3.STATUS & USART_DREIF_bm) != USART_DREIF_bm){}												// wait till buffer is empty.
 192:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 196:	85 ff       	sbrs	r24, 5
 198:	fc cf       	rjmp	.-8      	; 0x192 <__vector_53+0x46>
			USART3.TXDATAL = c - 19;																					// send next uppercase character.
 19a:	93 51       	subi	r25, 0x13	; 19
 19c:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <__vector_53+0x68>
		} else if (c == 'z') {
 1a2:	9a 37       	cpi	r25, 0x7A	; 122
 1a4:	39 f4       	brne	.+14     	; 0x1b4 <__vector_53+0x68>
			while ((USART3.STATUS & USART_DREIF_bm) != USART_DREIF_bm){}												// wait till buffer is empty.
 1a6:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 1aa:	85 ff       	sbrs	r24, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <__vector_53+0x5a>
			USART3.TXDATAL = 'A';																						// send 'A'
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		}
	}
}
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
