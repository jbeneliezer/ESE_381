
ic_test_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00804000  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804018  00804018  000003f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000315b  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dfe  00000000  00000000  000035e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000462  00000000  00000000  000063e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00006848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016ab  00000000  00000000  0000687c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000082  00000000  00000000  00007f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00007fa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e8 e4       	ldi	r30, 0x48	; 72
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a8 31       	cpi	r26, 0x18	; 24
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a8 e1       	ldi	r26, 0x18	; 24
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	aa 31       	cpi	r26, 0x1A	; 26
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
 12e:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <test>:

uint8_t i;

void test() {
	//turn DUT pin 14 on
	PORTE_OUT |= PIN3_bm;
 136:	e4 e8       	ldi	r30, 0x84	; 132
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24

	for (i = 0; i < 4; ++i) {
 140:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <i>
 144:	33 c0       	rjmp	.+102    	; 0x1ac <test+0x76>
		PORTC_OUT = stimulus[i];
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ec 5e       	subi	r30, 0xEC	; 236
 14a:	ff 4b       	sbci	r31, 0xBF	; 191
 14c:	80 81       	ld	r24, Z
 14e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <__TEXT_REGION_LENGTH__+0x7e0444>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <test+0x1e>
			
		_delay_loop_1(2);
			
		uint8_t a_in = (PORTA_IN & A_GATES_OUT_gm) >> 3 & 0x03;
 158:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
 15c:	8f 71       	andi	r24, 0x1F	; 31
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	95 95       	asr	r25
 162:	87 95       	ror	r24
 164:	95 95       	asr	r25
 166:	87 95       	ror	r24
 168:	95 95       	asr	r25
 16a:	87 95       	ror	r24
 16c:	28 2f       	mov	r18, r24
 16e:	23 70       	andi	r18, 0x03	; 3
		uint8_t b_in = (PORTB_IN & B_GATES_OUT_gm) >> 2 & 0x0C;
 170:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 174:	90 73       	andi	r25, 0x30	; 48
 176:	89 2f       	mov	r24, r25
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	8c 70       	andi	r24, 0x0C	; 12
			
		if (!((a_in | b_in) == verify[gate_type][i])) break;
 184:	82 2b       	or	r24, r18
 186:	90 91 19 40 	lds	r25, 0x4019	; 0x804019 <i>
 18a:	e0 91 18 40 	lds	r30, 0x4018	; 0x804018 <__data_end>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	f0 4c       	sbci	r31, 0xC0	; 192
 19c:	e9 0f       	add	r30, r25
 19e:	f1 1d       	adc	r31, r1
 1a0:	20 81       	ld	r18, Z
 1a2:	82 13       	cpse	r24, r18
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <test+0x7e>

void test() {
	//turn DUT pin 14 on
	PORTE_OUT |= PIN3_bm;

	for (i = 0; i < 4; ++i) {
 1a6:	9f 5f       	subi	r25, 0xFF	; 255
 1a8:	90 93 19 40 	sts	0x4019, r25	; 0x804019 <i>
 1ac:	e0 91 19 40 	lds	r30, 0x4019	; 0x804019 <i>
 1b0:	e4 30       	cpi	r30, 0x04	; 4
 1b2:	48 f2       	brcs	.-110    	; 0x146 <test+0x10>
		uint8_t b_in = (PORTB_IN & B_GATES_OUT_gm) >> 2 & 0x0C;
			
		if (!((a_in | b_in) == verify[gate_type][i])) break;
	}
		
	PORTE_OUT |= TIP_bm;
 1b4:	e4 e8       	ldi	r30, 0x84	; 132
 1b6:	f4 e0       	ldi	r31, 0x04	; 4
 1b8:	80 81       	ld	r24, Z
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	80 83       	st	Z, r24
		
	if (i == 4) PORTE_OUT &= ~PASS_bm;
 1be:	80 91 19 40 	lds	r24, 0x4019	; 0x804019 <i>
 1c2:	84 30       	cpi	r24, 0x04	; 4
 1c4:	21 f4       	brne	.+8      	; 0x1ce <test+0x98>
 1c6:	80 81       	ld	r24, Z
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	80 83       	st	Z, r24
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <test+0xa2>
	else PORTE_OUT &= ~FAIL_bm;
 1ce:	e4 e8       	ldi	r30, 0x84	; 132
 1d0:	f4 e0       	ldi	r31, 0x04	; 4
 1d2:	80 81       	ld	r24, Z
 1d4:	8d 7f       	andi	r24, 0xFD	; 253
 1d6:	80 83       	st	Z, r24
	
	PORTC_OUT = stimulus[0];
 1d8:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <__TEXT_REGION_LENGTH__+0x7e0444>

	//turn DUT pin 14 off
	PORTE_OUT &= ~PIN3_bm;
 1dc:	e4 e8       	ldi	r30, 0x84	; 132
 1de:	f4 e0       	ldi	r31, 0x04	; 4
 1e0:	80 81       	ld	r24, Z
 1e2:	87 7f       	andi	r24, 0xF7	; 247
 1e4:	80 83       	st	Z, r24
 1e6:	08 95       	ret

000001e8 <main>:
}

int main(void)
{
	PORTA_DIRSET &= PA_setup_gm;
 1e8:	e1 e0       	ldi	r30, 0x01	; 1
 1ea:	f4 e0       	ldi	r31, 0x04	; 4
 1ec:	80 81       	ld	r24, Z
 1ee:	87 70       	andi	r24, 0x07	; 7
 1f0:	80 83       	st	Z, r24
	PORTB_DIRSET &= PB_setup_gm;
 1f2:	e1 e2       	ldi	r30, 0x21	; 33
 1f4:	f4 e0       	ldi	r31, 0x04	; 4
 1f6:	80 81       	ld	r24, Z
 1f8:	8f 7c       	andi	r24, 0xCF	; 207
 1fa:	80 83       	st	Z, r24
	PORTC_DIRSET |= PC_setup_gm;
 1fc:	e1 e4       	ldi	r30, 0x41	; 65
 1fe:	f4 e0       	ldi	r31, 0x04	; 4
 200:	80 81       	ld	r24, Z
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	80 83       	st	Z, r24
	PORTD_DIRSET |= PD_setup_gm;
 206:	e1 e6       	ldi	r30, 0x61	; 97
 208:	f4 e0       	ldi	r31, 0x04	; 4
 20a:	80 81       	ld	r24, Z
 20c:	87 60       	ori	r24, 0x07	; 7
 20e:	80 83       	st	Z, r24
	PORTE_DIRSET |= PE_setup_gm;
 210:	e1 e8       	ldi	r30, 0x81	; 129
 212:	f4 e0       	ldi	r31, 0x04	; 4
 214:	80 81       	ld	r24, Z
 216:	8f 60       	ori	r24, 0x0F	; 15
 218:	80 83       	st	Z, r24
	PORTF_DIRSET &= PF_setup_gm;
 21a:	e1 ea       	ldi	r30, 0xA1	; 161
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	80 81       	ld	r24, Z
 220:	87 7f       	andi	r24, 0xF7	; 247
 222:	80 83       	st	Z, r24
	
	PORTA_PIN7CTRL |= PORT_PULLUPEN_bm;
 224:	e7 e1       	ldi	r30, 0x17	; 23
 226:	f4 e0       	ldi	r31, 0x04	; 4
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
	PORTA_PIN6CTRL |= PORT_PULLUPEN_bm;
 22e:	e6 e1       	ldi	r30, 0x16	; 22
 230:	f4 e0       	ldi	r31, 0x04	; 4
 232:	80 81       	ld	r24, Z
 234:	88 60       	ori	r24, 0x08	; 8
 236:	80 83       	st	Z, r24
	PORTA_PIN5CTRL |= PORT_PULLUPEN_bm;
 238:	e5 e1       	ldi	r30, 0x15	; 21
 23a:	f4 e0       	ldi	r31, 0x04	; 4
 23c:	80 81       	ld	r24, Z
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	80 83       	st	Z, r24
	PORTA_PIN4CTRL |= PORT_PULLUPEN_bm;
 242:	e4 e1       	ldi	r30, 0x14	; 20
 244:	f4 e0       	ldi	r31, 0x04	; 4
 246:	80 81       	ld	r24, Z
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 83       	st	Z, r24
	PORTA_PIN3CTRL |= PORT_PULLUPEN_bm;
 24c:	e3 e1       	ldi	r30, 0x13	; 19
 24e:	f4 e0       	ldi	r31, 0x04	; 4
 250:	80 81       	ld	r24, Z
 252:	88 60       	ori	r24, 0x08	; 8
 254:	80 83       	st	Z, r24
	PORTF_PIN3CTRL |= PORT_PULLUPEN_bm;
 256:	e3 eb       	ldi	r30, 0xB3	; 179
 258:	f4 e0       	ldi	r31, 0x04	; 4
 25a:	80 81       	ld	r24, Z
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	80 83       	st	Z, r24

	PORTD_OUT = ~BARGRAPH_gm;
 260:	a4 e6       	ldi	r26, 0x64	; 100
 262:	b4 e0       	ldi	r27, 0x04	; 4
 264:	88 ef       	ldi	r24, 0xF8	; 248
 266:	8c 93       	st	X, r24
	PORTE_OUT &= ~(TIP_bm | PASS_bm | FAIL_bm);
 268:	e4 e8       	ldi	r30, 0x84	; 132
 26a:	f4 e0       	ldi	r31, 0x04	; 4
 26c:	80 81       	ld	r24, Z
 26e:	88 7f       	andi	r24, 0xF8	; 248
 270:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	84 e3       	ldi	r24, 0x34	; 52
 276:	9c e0       	ldi	r25, 0x0C	; 12
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 280:	00 c0       	rjmp	.+0      	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
 282:	00 00       	nop
	_delay_ms(1000);
	PORTD_OUT |= BARGRAPH_gm;
 284:	8c 91       	ld	r24, X
 286:	87 60       	ori	r24, 0x07	; 7
 288:	8c 93       	st	X, r24
	PORTE_OUT |= TIP_bm | PASS_bm | FAIL_bm;
 28a:	80 81       	ld	r24, Z
 28c:	87 60       	ori	r24, 0x07	; 7
 28e:	80 83       	st	Z, r24


    while (1) 
    {
		if ((PORTF_IN & START_PB_bm) != 0) continue;
 290:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <__TEXT_REGION_LENGTH__+0x7e04a8>
 294:	83 fd       	sbrc	r24, 3
 296:	fc cf       	rjmp	.-8      	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
		
		PORTD_OUT = BARGRAPH_gm;
 298:	e4 e6       	ldi	r30, 0x64	; 100
 29a:	f4 e0       	ldi	r31, 0x04	; 4
 29c:	87 e0       	ldi	r24, 0x07	; 7
 29e:	80 83       	st	Z, r24

		PORTE_OUT = ~TIP_bm;
 2a0:	8b ef       	ldi	r24, 0xFB	; 251
 2a2:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <__TEXT_REGION_LENGTH__+0x7e0484>

		gate_type = ~(PORTA_IN | 0x1F) >> 5 & 0x07;
 2a6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
 2aa:	8f 61       	ori	r24, 0x1F	; 31
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	80 95       	com	r24
 2b0:	90 95       	com	r25
 2b2:	95 95       	asr	r25
 2b4:	87 95       	ror	r24
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	95 95       	asr	r25
 2c0:	87 95       	ror	r24
 2c2:	95 95       	asr	r25
 2c4:	87 95       	ror	r24
 2c6:	87 70       	andi	r24, 0x07	; 7
 2c8:	80 93 18 40 	sts	0x4018, r24	; 0x804018 <__data_end>
		
		PORTD_OUT &= ~(gate_type & BARGRAPH_gm);
 2cc:	90 81       	ld	r25, Z
 2ce:	80 95       	com	r24
 2d0:	89 23       	and	r24, r25
 2d2:	80 83       	st	Z, r24

		if (gate_type == 4) {
 2d4:	80 91 18 40 	lds	r24, 0x4018	; 0x804018 <__data_end>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	89 f5       	brne	.+98     	; 0x33e <__EEPROM_REGION_LENGTH__+0x13e>
			//enable pullups
			PORTA_PIN4CTRL |= PORT_PULLUPEN_bm;
 2dc:	0f 2e       	mov	r0, r31
 2de:	f4 e1       	ldi	r31, 0x14	; 20
 2e0:	cf 2e       	mov	r12, r31
 2e2:	f4 e0       	ldi	r31, 0x04	; 4
 2e4:	df 2e       	mov	r13, r31
 2e6:	f0 2d       	mov	r31, r0
 2e8:	f6 01       	movw	r30, r12
 2ea:	80 81       	ld	r24, Z
 2ec:	88 60       	ori	r24, 0x08	; 8
 2ee:	80 83       	st	Z, r24
			PORTA_PIN3CTRL |= PORT_PULLUPEN_bm;
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f3 e1       	ldi	r31, 0x13	; 19
 2f4:	ef 2e       	mov	r14, r31
 2f6:	f4 e0       	ldi	r31, 0x04	; 4
 2f8:	ff 2e       	mov	r15, r31
 2fa:	f0 2d       	mov	r31, r0
 2fc:	f7 01       	movw	r30, r14
 2fe:	80 81       	ld	r24, Z
 300:	88 60       	ori	r24, 0x08	; 8
 302:	80 83       	st	Z, r24
			PORTB_PIN5CTRL |= PORT_PULLUPEN_bm;
 304:	05 e3       	ldi	r16, 0x35	; 53
 306:	14 e0       	ldi	r17, 0x04	; 4
 308:	f8 01       	movw	r30, r16
 30a:	80 81       	ld	r24, Z
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	80 83       	st	Z, r24
			PORTB_PIN4CTRL |= PORT_PULLUPEN_bm;
 310:	c4 e3       	ldi	r28, 0x34	; 52
 312:	d4 e0       	ldi	r29, 0x04	; 4
 314:	88 81       	ld	r24, Y
 316:	88 60       	ori	r24, 0x08	; 8
 318:	88 83       	st	Y, r24
			test();
 31a:	0e 94 9b 00 	call	0x136	; 0x136 <test>
			PORTA_PIN4CTRL &= ~PORT_PULLUPEN_bm;
 31e:	f6 01       	movw	r30, r12
 320:	80 81       	ld	r24, Z
 322:	87 7f       	andi	r24, 0xF7	; 247
 324:	80 83       	st	Z, r24
			PORTA_PIN3CTRL &= ~PORT_PULLUPEN_bm;
 326:	f7 01       	movw	r30, r14
 328:	80 81       	ld	r24, Z
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	80 83       	st	Z, r24
			PORTB_PIN5CTRL &= ~PORT_PULLUPEN_bm;
 32e:	f8 01       	movw	r30, r16
 330:	80 81       	ld	r24, Z
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	80 83       	st	Z, r24
			PORTB_PIN4CTRL &= ~PORT_PULLUPEN_bm;
 336:	88 81       	ld	r24, Y
 338:	87 7f       	andi	r24, 0xF7	; 247
 33a:	88 83       	st	Y, r24
 33c:	a9 cf       	rjmp	.-174    	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
		} else {
			test();
 33e:	0e 94 9b 00 	call	0x136	; 0x136 <test>
 342:	a6 cf       	rjmp	.-180    	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
