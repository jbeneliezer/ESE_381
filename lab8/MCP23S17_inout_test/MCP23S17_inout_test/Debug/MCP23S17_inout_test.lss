
MCP23S17_inout_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033ab  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e2f  00000000  00000000  0000366b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d3  00000000  00000000  0000649a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00006870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017e4  00000000  00000000  000068d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a2  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000815a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 c0 00 	call	0x180	; 0x180 <main>
 104:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <MCP23S17_SPI_write>:
	MCP23S17_SPI_write(WRITE_opcode, GPPUAaddr_b1, 0xFF);
}

void MCP23S17_SPI_write(uint8_t opcode, uint8_t addr, uint8_t data)
{
	PORTF.OUT &= ~PIN2_bm;
 10c:	e0 ea       	ldi	r30, 0xA0	; 160
 10e:	f4 e0       	ldi	r31, 0x04	; 4
 110:	94 81       	ldd	r25, Z+4	; 0x04
 112:	9b 7f       	andi	r25, 0xFB	; 251
 114:	94 83       	std	Z+4, r25	; 0x04
	SPI0.DATA = opcode;
 116:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while ((SPI0.INTFLAGS & PIN7_bm) == 0x00) {}
 11a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 11e:	88 23       	and	r24, r24
 120:	e4 f7       	brge	.-8      	; 0x11a <MCP23S17_SPI_write+0xe>
	SPI0.DATA = addr;
 122:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while ((SPI0.INTFLAGS & PIN7_bm) == 0x00) {}
 126:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 12a:	88 23       	and	r24, r24
 12c:	e4 f7       	brge	.-8      	; 0x126 <MCP23S17_SPI_write+0x1a>
	SPI0.DATA = data;
 12e:	40 93 44 09 	sts	0x0944, r20	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while ((SPI0.INTFLAGS & PIN7_bm) == 0x00) {}
 132:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 136:	88 23       	and	r24, r24
 138:	e4 f7       	brge	.-8      	; 0x132 <MCP23S17_SPI_write+0x26>
	PORTF.OUT |= PIN2_bm;
 13a:	e0 ea       	ldi	r30, 0xA0	; 160
 13c:	f4 e0       	ldi	r31, 0x04	; 4
 13e:	84 81       	ldd	r24, Z+4	; 0x04
 140:	84 60       	ori	r24, 0x04	; 4
 142:	84 83       	std	Z+4, r24	; 0x04
 144:	08 95       	ret

00000146 <MCP23S17_SPI_init>:
	}
}

void MCP23S17_SPI_init()
{
	MCP23S17_SPI_write(WRITE_opcode, IOCONaddr_b0, 0x80);
 146:	40 e8       	ldi	r20, 0x80	; 128
 148:	6a e0       	ldi	r22, 0x0A	; 10
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23S17_SPI_write>
	MCP23S17_SPI_write(WRITE_opcode, IODIRAaddr_b1, 0xFF);
 150:	4f ef       	ldi	r20, 0xFF	; 255
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	80 e4       	ldi	r24, 0x40	; 64
 156:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23S17_SPI_write>
	MCP23S17_SPI_write(WRITE_opcode, IODIRBaddr_b1, 0x00);
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	60 e1       	ldi	r22, 0x10	; 16
 15e:	80 e4       	ldi	r24, 0x40	; 64
 160:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23S17_SPI_write>
	MCP23S17_SPI_write(WRITE_opcode, GPPUAaddr_b1, 0xFF);
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	66 e0       	ldi	r22, 0x06	; 6
 168:	80 e4       	ldi	r24, 0x40	; 64
 16a:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23S17_SPI_write>
 16e:	08 95       	ret

00000170 <MCP23S17_SPI_read>:
	PORTF.OUT |= PIN2_bm;
}

uint8_t MCP23S17_SPI_read(uint8_t addr)
{
	MCP23S17_SPI_write(READ_opcode, addr, 0x00);
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	68 2f       	mov	r22, r24
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23S17_SPI_write>
	return SPI0.DATA;
 17a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
}
 17e:	08 95       	ret

00000180 <main>:
void MCP23S17_SPI_init();
void MCP23S17_SPI_write(uint8_t, uint8_t, uint8_t);
uint8_t MCP23S17_SPI_read(uint8_t);

int main(void)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRSET = PIN4_bm | PIN6_bm | PIN7_bm;
 18a:	e0 e0       	ldi	r30, 0x00	; 0
 18c:	f4 e0       	ldi	r31, 0x04	; 4
 18e:	80 ed       	ldi	r24, 0xD0	; 208
 190:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRCLR = PIN5_bm;
 192:	80 e2       	ldi	r24, 0x20	; 32
 194:	82 83       	std	Z+2, r24	; 0x02
	PORTF.DIRSET = PIN2_bm;
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
	
	SPI0.CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_PRESC_DIV4_gc;
 19c:	81 e2       	ldi	r24, 0x21	; 33
 19e:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
	PORTA.OUT &= ~PIN7_bm;
 1a2:	84 81       	ldd	r24, Z+4	; 0x04
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	84 83       	std	Z+4, r24	; 0x04

	volatile uint8_t i;

	MCP23S17_SPI_init();
 1a8:	0e 94 a3 00 	call	0x146	; 0x146 <MCP23S17_SPI_init>
	
	while (1)
	{
		i = MCP23S17_SPI_read(GPIOAaddr_b1);
 1ac:	89 e0       	ldi	r24, 0x09	; 9
 1ae:	0e 94 b8 00 	call	0x170	; 0x170 <MCP23S17_SPI_read>
 1b2:	89 83       	std	Y+1, r24	; 0x01
		MCP23S17_SPI_write(WRITE_opcode, OLATBaddr_b1, i);
 1b4:	49 81       	ldd	r20, Y+1	; 0x01
 1b6:	6a e1       	ldi	r22, 0x1A	; 26
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	0e 94 86 00 	call	0x10c	; 0x10c <MCP23S17_SPI_write>
 1be:	f6 cf       	rjmp	.-20     	; 0x1ac <main+0x2c>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
