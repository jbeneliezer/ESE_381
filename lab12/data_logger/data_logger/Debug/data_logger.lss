
data_logger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00804000  000008a8  0000093c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  008040bc  008040bc  000009f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050ff  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000361a  00000000  00000000  00005cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f72  00000000  00000000  00009311  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b8  00000000  00000000  0000a284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ecf  00000000  00000000  0000a63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f9  00000000  00000000  0000c50b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000ce04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_26>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_30>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_53>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e8 ea       	ldi	r30, 0xA8	; 168
 108:	f8 e0       	ldi	r31, 0x08	; 8
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ac 3b       	cpi	r26, 0xBC	; 188
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ac eb       	ldi	r26, 0xBC	; 188
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a3 3f       	cpi	r26, 0xF3	; 243
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
 12e:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <adc_init>:
 136:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	f6 e0       	ldi	r31, 0x06	; 6
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 83       	st	Z, r24
 142:	84 87       	std	Z+12, r24	; 0x0c
 144:	08 95       	ret

00000146 <convert>:
 146:	24 ec       	ldi	r18, 0xC4	; 196
 148:	39 e0       	ldi	r19, 0x09	; 9
 14a:	ac 01       	movw	r20, r24
 14c:	42 9f       	mul	r20, r18
 14e:	c0 01       	movw	r24, r0
 150:	43 9f       	mul	r20, r19
 152:	90 0d       	add	r25, r0
 154:	52 9f       	mul	r21, r18
 156:	90 0d       	add	r25, r0
 158:	11 24       	eor	r1, r1
 15a:	89 2f       	mov	r24, r25
 15c:	99 27       	eor	r25, r25
 15e:	86 95       	lsr	r24
 160:	86 95       	lsr	r24
 162:	84 5f       	subi	r24, 0xF4	; 244
 164:	91 40       	sbci	r25, 0x01	; 1
 166:	08 95       	ret

00000168 <bin2ascii>:
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret

0000016e <lcd_spi_transmit_CMD>:
 16e:	e0 e4       	ldi	r30, 0x40	; 64
 170:	f4 e0       	ldi	r31, 0x04	; 4
 172:	94 81       	ldd	r25, Z+4	; 0x04
 174:	9e 7f       	andi	r25, 0xFE	; 254
 176:	94 83       	std	Z+4, r25	; 0x04
 178:	e0 ea       	ldi	r30, 0xA0	; 160
 17a:	f4 e0       	ldi	r31, 0x04	; 4
 17c:	94 81       	ldd	r25, Z+4	; 0x04
 17e:	97 7f       	andi	r25, 0xF7	; 247
 180:	94 83       	std	Z+4, r25	; 0x04
 182:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 186:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 18a:	88 23       	and	r24, r24
 18c:	e4 f7       	brge	.-8      	; 0x186 <lcd_spi_transmit_CMD+0x18>
 18e:	e0 ea       	ldi	r30, 0xA0	; 160
 190:	f4 e0       	ldi	r31, 0x04	; 4
 192:	84 81       	ldd	r24, Z+4	; 0x04
 194:	88 60       	ori	r24, 0x08	; 8
 196:	84 83       	std	Z+4, r24	; 0x04
 198:	08 95       	ret

0000019a <lcd_spi_transmit_DATA>:
 19a:	e0 e4       	ldi	r30, 0x40	; 64
 19c:	f4 e0       	ldi	r31, 0x04	; 4
 19e:	94 81       	ldd	r25, Z+4	; 0x04
 1a0:	91 60       	ori	r25, 0x01	; 1
 1a2:	94 83       	std	Z+4, r25	; 0x04
 1a4:	e0 ea       	ldi	r30, 0xA0	; 160
 1a6:	f4 e0       	ldi	r31, 0x04	; 4
 1a8:	94 81       	ldd	r25, Z+4	; 0x04
 1aa:	97 7f       	andi	r25, 0xF7	; 247
 1ac:	94 83       	std	Z+4, r25	; 0x04
 1ae:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 1b2:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1b6:	88 23       	and	r24, r24
 1b8:	e4 f7       	brge	.-8      	; 0x1b2 <lcd_spi_transmit_DATA+0x18>
 1ba:	e0 ea       	ldi	r30, 0xA0	; 160
 1bc:	f4 e0       	ldi	r31, 0x04	; 4
 1be:	84 81       	ldd	r24, Z+4	; 0x04
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	84 83       	std	Z+4, r24	; 0x04
 1c4:	08 95       	ret

000001c6 <init_spi_lcd>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	e0 e4       	ldi	r30, 0x40	; 64
 1cc:	f4 e0       	ldi	r31, 0x04	; 4
 1ce:	80 81       	ld	r24, Z
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	80 83       	st	Z, r24
 1d4:	a0 ea       	ldi	r26, 0xA0	; 160
 1d6:	b4 e0       	ldi	r27, 0x04	; 4
 1d8:	8c 91       	ld	r24, X
 1da:	88 60       	ori	r24, 0x08	; 8
 1dc:	8c 93       	st	X, r24
 1de:	80 e5       	ldi	r24, 0x50	; 80
 1e0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
 1e4:	c0 e4       	ldi	r28, 0x40	; 64
 1e6:	d9 e0       	ldi	r29, 0x09	; 9
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	81 e2       	ldi	r24, 0x21	; 33
 1ee:	88 83       	st	Y, r24
 1f0:	14 96       	adiw	r26, 0x04	; 4
 1f2:	8c 91       	ld	r24, X
 1f4:	14 97       	sbiw	r26, 0x04	; 4
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	14 96       	adiw	r26, 0x04	; 4
 1fa:	8c 93       	st	X, r24
 1fc:	84 81       	ldd	r24, Z+4	; 0x04
 1fe:	8e 7f       	andi	r24, 0xFE	; 254
 200:	84 83       	std	Z+4, r24	; 0x04
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <delay_40mS>:
 208:	28 e2       	ldi	r18, 0x28	; 40
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	0b c0       	rjmp	.+22     	; 0x224 <delay_40mS+0x1c>
 20e:	00 00       	nop
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	02 c0       	rjmp	.+4      	; 0x218 <delay_40mS+0x10>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	80 32       	cpi	r24, 0x20	; 32
 21a:	43 e0       	ldi	r20, 0x03	; 3
 21c:	94 07       	cpc	r25, r20
 21e:	bc f3       	brlt	.-18     	; 0x20e <delay_40mS+0x6>
 220:	21 50       	subi	r18, 0x01	; 1
 222:	31 09       	sbc	r19, r1
 224:	12 16       	cp	r1, r18
 226:	13 06       	cpc	r1, r19
 228:	ac f3       	brlt	.-22     	; 0x214 <delay_40mS+0xc>
 22a:	08 95       	ret

0000022c <delay_30uS>:
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	0a c0       	rjmp	.+20     	; 0x246 <delay_30uS+0x1a>
 232:	00 00       	nop
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	02 c0       	rjmp	.+4      	; 0x23c <delay_30uS+0x10>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	91 05       	cpc	r25, r1
 240:	c4 f3       	brlt	.-16     	; 0x232 <delay_30uS+0x6>
 242:	21 50       	subi	r18, 0x01	; 1
 244:	31 09       	sbc	r19, r1
 246:	12 16       	cp	r1, r18
 248:	13 06       	cpc	r1, r19
 24a:	b4 f3       	brlt	.-20     	; 0x238 <delay_30uS+0xc>
 24c:	08 95       	ret

0000024e <init_lcd_dog>:
 24e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <init_spi_lcd>
 252:	0e 94 04 01 	call	0x208	; 0x208 <delay_40mS>
 256:	89 e3       	ldi	r24, 0x39	; 57
 258:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 25c:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 260:	89 e3       	ldi	r24, 0x39	; 57
 262:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 266:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 26a:	8e e1       	ldi	r24, 0x1E	; 30
 26c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 270:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 274:	85 e5       	ldi	r24, 0x55	; 85
 276:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 27a:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 27e:	8c e6       	ldi	r24, 0x6C	; 108
 280:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 284:	0e 94 04 01 	call	0x208	; 0x208 <delay_40mS>
 288:	0e 94 04 01 	call	0x208	; 0x208 <delay_40mS>
 28c:	0e 94 04 01 	call	0x208	; 0x208 <delay_40mS>
 290:	0e 94 04 01 	call	0x208	; 0x208 <delay_40mS>
 294:	0e 94 04 01 	call	0x208	; 0x208 <delay_40mS>
 298:	8f e7       	ldi	r24, 0x7F	; 127
 29a:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 29e:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2a2:	8c e0       	ldi	r24, 0x0C	; 12
 2a4:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 2a8:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 2b2:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2b6:	86 e0       	ldi	r24, 0x06	; 6
 2b8:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 2bc:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2c0:	08 95       	ret

000002c2 <update_lcd_dog>:
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	0e 94 27 01 	call	0x24e	; 0x24e <init_lcd_dog>
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 2d0:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2d4:	c0 e0       	ldi	r28, 0x00	; 0
 2d6:	d0 e0       	ldi	r29, 0x00	; 0
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <update_lcd_dog+0x2a>
 2da:	fe 01       	movw	r30, r28
 2dc:	e0 54       	subi	r30, 0x40	; 64
 2de:	ff 4b       	sbci	r31, 0xBF	; 191
 2e0:	80 81       	ld	r24, Z
 2e2:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_spi_transmit_DATA>
 2e6:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	c0 31       	cpi	r28, 0x10	; 16
 2ee:	d1 05       	cpc	r29, r1
 2f0:	a4 f3       	brlt	.-24     	; 0x2da <update_lcd_dog+0x18>
 2f2:	80 e9       	ldi	r24, 0x90	; 144
 2f4:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 2f8:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 2fc:	c0 e0       	ldi	r28, 0x00	; 0
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
 300:	09 c0       	rjmp	.+18     	; 0x314 <update_lcd_dog+0x52>
 302:	fe 01       	movw	r30, r28
 304:	ef 52       	subi	r30, 0x2F	; 47
 306:	ff 4b       	sbci	r31, 0xBF	; 191
 308:	80 81       	ld	r24, Z
 30a:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_spi_transmit_DATA>
 30e:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	c0 31       	cpi	r28, 0x10	; 16
 316:	d1 05       	cpc	r29, r1
 318:	a4 f3       	brlt	.-24     	; 0x302 <update_lcd_dog+0x40>
 31a:	80 ea       	ldi	r24, 0xA0	; 160
 31c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_spi_transmit_CMD>
 320:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 324:	c0 e0       	ldi	r28, 0x00	; 0
 326:	d0 e0       	ldi	r29, 0x00	; 0
 328:	09 c0       	rjmp	.+18     	; 0x33c <update_lcd_dog+0x7a>
 32a:	fe 01       	movw	r30, r28
 32c:	ee 51       	subi	r30, 0x1E	; 30
 32e:	ff 4b       	sbci	r31, 0xBF	; 191
 330:	80 81       	ld	r24, Z
 332:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_spi_transmit_DATA>
 336:	0e 94 16 01 	call	0x22c	; 0x22c <delay_30uS>
 33a:	21 96       	adiw	r28, 0x01	; 1
 33c:	c0 31       	cpi	r28, 0x10	; 16
 33e:	d1 05       	cpc	r29, r1
 340:	a4 f3       	brlt	.-24     	; 0x32a <update_lcd_dog+0x68>
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	08 95       	ret

00000348 <write_line>:
 348:	82 30       	cpi	r24, 0x02	; 2
 34a:	91 05       	cpc	r25, r1
 34c:	a1 f0       	breq	.+40     	; 0x376 <write_line+0x2e>
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	91 05       	cpc	r25, r1
 352:	01 f1       	breq	.+64     	; 0x394 <write_line+0x4c>
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	61 f5       	brne	.+88     	; 0x3b0 <write_line+0x68>
 358:	fb 01       	movw	r30, r22
 35a:	01 90       	ld	r0, Z+
 35c:	00 20       	and	r0, r0
 35e:	e9 f7       	brne	.-6      	; 0x35a <write_line+0x12>
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	af 01       	movw	r20, r30
 364:	46 1b       	sub	r20, r22
 366:	57 0b       	sbc	r21, r23
 368:	44 0f       	add	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	80 ec       	ldi	r24, 0xC0	; 192
 36e:	90 e4       	ldi	r25, 0x40	; 64
 370:	0e 94 43 04 	call	0x886	; 0x886 <strncpy>
 374:	1d c0       	rjmp	.+58     	; 0x3b0 <write_line+0x68>
 376:	fb 01       	movw	r30, r22
 378:	01 90       	ld	r0, Z+
 37a:	00 20       	and	r0, r0
 37c:	e9 f7       	brne	.-6      	; 0x378 <write_line+0x30>
 37e:	31 97       	sbiw	r30, 0x01	; 1
 380:	af 01       	movw	r20, r30
 382:	46 1b       	sub	r20, r22
 384:	57 0b       	sbc	r21, r23
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	81 ed       	ldi	r24, 0xD1	; 209
 38c:	90 e4       	ldi	r25, 0x40	; 64
 38e:	0e 94 43 04 	call	0x886	; 0x886 <strncpy>
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <write_line+0x68>
 394:	fb 01       	movw	r30, r22
 396:	01 90       	ld	r0, Z+
 398:	00 20       	and	r0, r0
 39a:	e9 f7       	brne	.-6      	; 0x396 <write_line+0x4e>
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	af 01       	movw	r20, r30
 3a0:	46 1b       	sub	r20, r22
 3a2:	57 0b       	sbc	r21, r23
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	82 ee       	ldi	r24, 0xE2	; 226
 3aa:	90 e4       	ldi	r25, 0x40	; 64
 3ac:	0e 94 43 04 	call	0x886	; 0x886 <strncpy>
 3b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <update_lcd_dog>
 3b4:	08 95       	ret

000003b6 <write_RTC>:
 3b6:	e0 e4       	ldi	r30, 0x40	; 64
 3b8:	f4 e0       	ldi	r31, 0x04	; 4
 3ba:	94 81       	ldd	r25, Z+4	; 0x04
 3bc:	92 60       	ori	r25, 0x02	; 2
 3be:	94 83       	std	Z+4, r25	; 0x04
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3c6:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3ca:	88 23       	and	r24, r24
 3cc:	e4 f7       	brge	.-8      	; 0x3c6 <write_RTC+0x10>
 3ce:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3d2:	e0 e4       	ldi	r30, 0x40	; 64
 3d4:	f4 e0       	ldi	r31, 0x04	; 4
 3d6:	84 81       	ldd	r24, Z+4	; 0x04
 3d8:	8d 7f       	andi	r24, 0xFD	; 253
 3da:	84 83       	std	Z+4, r24	; 0x04
 3dc:	08 95       	ret

000003de <read_RTC>:
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <write_RTC>
 3e4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 3e8:	08 95       	ret

000003ea <SPI_rtc_ds1306_config>:
 3ea:	e0 e4       	ldi	r30, 0x40	; 64
 3ec:	f4 e0       	ldi	r31, 0x04	; 4
 3ee:	80 81       	ld	r24, Z
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	80 83       	st	Z, r24
 3f4:	80 e5       	ldi	r24, 0x50	; 80
 3f6:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
 3fa:	e0 e4       	ldi	r30, 0x40	; 64
 3fc:	f9 e0       	ldi	r31, 0x09	; 9
 3fe:	81 e2       	ldi	r24, 0x21	; 33
 400:	80 83       	st	Z, r24
 402:	87 e0       	ldi	r24, 0x07	; 7
 404:	81 83       	std	Z+1, r24	; 0x01
 406:	64 e0       	ldi	r22, 0x04	; 4
 408:	8f e8       	ldi	r24, 0x8F	; 143
 40a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <write_RTC>
 40e:	08 95       	ret

00000410 <set_fn>:
 410:	08 95       	ret

00000412 <digit_fn>:
 412:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <digits>
 416:	88 0f       	add	r24, r24
 418:	98 2f       	mov	r25, r24
 41a:	99 0f       	add	r25, r25
 41c:	99 0f       	add	r25, r25
 41e:	89 0f       	add	r24, r25
 420:	90 91 bc 40 	lds	r25, 0x40BC	; 0x8040bc <__data_end>
 424:	89 0f       	add	r24, r25
 426:	80 93 be 40 	sts	0x40BE, r24	; 0x8040be <digits>
 42a:	08 95       	ret

0000042c <error_fn>:
 42c:	6f e1       	ldi	r22, 0x1F	; 31
 42e:	70 e4       	ldi	r23, 0x40	; 64
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
 438:	6a e0       	ldi	r22, 0x0A	; 10
 43a:	70 e4       	ldi	r23, 0x40	; 64
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
 444:	6f e1       	ldi	r22, 0x1F	; 31
 446:	70 e4       	ldi	r23, 0x40	; 64
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	2f e3       	ldi	r18, 0x3F	; 63
 452:	8d e0       	ldi	r24, 0x0D	; 13
 454:	93 e0       	ldi	r25, 0x03	; 3
 456:	21 50       	subi	r18, 0x01	; 1
 458:	80 40       	sbci	r24, 0x00	; 0
 45a:	90 40       	sbci	r25, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <error_fn+0x2a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <error_fn+0x34>
 460:	00 00       	nop
 462:	10 92 bc 40 	sts	0x40BC, r1	; 0x8040bc <__data_end>
 466:	10 92 bd 40 	sts	0x40BD, r1	; 0x8040bd <__data_end+0x1>
 46a:	08 95       	ret

0000046c <bcd2int>:
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	08 95       	ret

00000472 <hours_fn>:
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 478:	8f 63       	ori	r24, 0x3F	; 63
 47a:	0e 94 36 02 	call	0x46c	; 0x46c <bcd2int>
 47e:	46 e0       	ldi	r20, 0x06	; 6
 480:	50 e0       	ldi	r21, 0x00	; 0
 482:	bc 01       	movw	r22, r24
 484:	8b e1       	ldi	r24, 0x1B	; 27
 486:	90 e4       	ldi	r25, 0x40	; 64
 488:	0e 94 33 04 	call	0x866	; 0x866 <strncat>
 48c:	bc 01       	movw	r22, r24
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
 496:	08 95       	ret

00000498 <minutes_fn>:
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 4a4:	0e 94 36 02 	call	0x46c	; 0x46c <bcd2int>
 4a8:	48 e0       	ldi	r20, 0x08	; 8
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	bc 01       	movw	r22, r24
 4ae:	80 e2       	ldi	r24, 0x20	; 32
 4b0:	90 e4       	ldi	r25, 0x40	; 64
 4b2:	0e 94 33 04 	call	0x866	; 0x866 <strncat>
 4b6:	bc 01       	movw	r22, r24
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
 4c0:	08 95       	ret

000004c2 <seconds_fn>:
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 4c8:	0e 94 36 02 	call	0x46c	; 0x46c <bcd2int>
 4cc:	48 e0       	ldi	r20, 0x08	; 8
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	bc 01       	movw	r22, r24
 4d2:	85 e2       	ldi	r24, 0x25	; 37
 4d4:	90 e4       	ldi	r25, 0x40	; 64
 4d6:	0e 94 33 04 	call	0x866	; 0x866 <strncat>
 4da:	bc 01       	movw	r22, r24
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
 4e4:	08 95       	ret

000004e6 <int2bcd>:
 4e6:	6a e0       	ldi	r22, 0x0A	; 10
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	0e 94 0b 04 	call	0x816	; 0x816 <__divmodhi4>
 4ee:	62 95       	swap	r22
 4f0:	72 95       	swap	r23
 4f2:	70 7f       	andi	r23, 0xF0	; 240
 4f4:	76 27       	eor	r23, r22
 4f6:	60 7f       	andi	r22, 0xF0	; 240
 4f8:	76 27       	eor	r23, r22
 4fa:	8f 70       	andi	r24, 0x0F	; 15
 4fc:	86 2b       	or	r24, r22
 4fe:	08 95       	ret

00000500 <enter_hours_fn>:
 500:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <digits>
 504:	9b ea       	ldi	r25, 0xAB	; 171
 506:	89 9f       	mul	r24, r25
 508:	91 2d       	mov	r25, r1
 50a:	11 24       	eor	r1, r1
 50c:	92 95       	swap	r25
 50e:	9f 70       	andi	r25, 0x0F	; 15
 510:	28 e1       	ldi	r18, 0x18	; 24
 512:	92 9f       	mul	r25, r18
 514:	80 19       	sub	r24, r0
 516:	11 24       	eor	r1, r1
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <int2bcd>
 51e:	68 2f       	mov	r22, r24
 520:	60 64       	ori	r22, 0x40	; 64
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	0e 94 db 01 	call	0x3b6	; 0x3b6 <write_RTC>
 528:	08 95       	ret

0000052a <enter_minutes_fn>:
 52a:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <digits>
 52e:	99 e8       	ldi	r25, 0x89	; 137
 530:	89 9f       	mul	r24, r25
 532:	91 2d       	mov	r25, r1
 534:	11 24       	eor	r1, r1
 536:	92 95       	swap	r25
 538:	96 95       	lsr	r25
 53a:	97 70       	andi	r25, 0x07	; 7
 53c:	2c e3       	ldi	r18, 0x3C	; 60
 53e:	92 9f       	mul	r25, r18
 540:	80 19       	sub	r24, r0
 542:	11 24       	eor	r1, r1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 73 02 	call	0x4e6	; 0x4e6 <int2bcd>
 54a:	68 2f       	mov	r22, r24
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <write_RTC>
 552:	10 92 bc 40 	sts	0x40BC, r1	; 0x8040bc <__data_end>
 556:	10 92 bd 40 	sts	0x40BD, r1	; 0x8040bd <__data_end+0x1>
 55a:	08 95       	ret

0000055c <enter_seconds_fn>:
 55c:	80 91 be 40 	lds	r24, 0x40BE	; 0x8040be <digits>
 560:	99 e8       	ldi	r25, 0x89	; 137
 562:	89 9f       	mul	r24, r25
 564:	91 2d       	mov	r25, r1
 566:	11 24       	eor	r1, r1
 568:	92 95       	swap	r25
 56a:	96 95       	lsr	r25
 56c:	97 70       	andi	r25, 0x07	; 7
 56e:	2c e3       	ldi	r18, 0x3C	; 60
 570:	92 9f       	mul	r25, r18
 572:	80 19       	sub	r24, r0
 574:	11 24       	eor	r1, r1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 73 02 	call	0x4e6	; 0x4e6 <int2bcd>
 57c:	68 2f       	mov	r22, r24
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	0e 94 db 01 	call	0x3b6	; 0x3b6 <write_RTC>
 584:	08 95       	ret

00000586 <fsm_ui>:
 586:	0f 93       	push	r16
 588:	1f 93       	push	r17
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <fsm_ui+0x12>
 594:	2f 5f       	subi	r18, 0xFF	; 255
 596:	3f 4f       	sbci	r19, 0xFF	; 255
 598:	c8 2f       	mov	r28, r24
 59a:	d0 e0       	ldi	r29, 0x00	; 0
 59c:	fe 01       	movw	r30, r28
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	e0 50       	subi	r30, 0x00	; 0
 5a4:	f0 4c       	sbci	r31, 0xC0	; 192
 5a6:	01 90       	ld	r0, Z+
 5a8:	f0 81       	ld	r31, Z
 5aa:	e0 2d       	mov	r30, r0
 5ac:	89 01       	movw	r16, r18
 5ae:	00 0f       	add	r16, r16
 5b0:	11 1f       	adc	r17, r17
 5b2:	00 0f       	add	r16, r16
 5b4:	11 1f       	adc	r17, r17
 5b6:	e0 0f       	add	r30, r16
 5b8:	f1 1f       	adc	r31, r17
 5ba:	90 81       	ld	r25, Z
 5bc:	96 17       	cp	r25, r22
 5be:	11 f0       	breq	.+4      	; 0x5c4 <fsm_ui+0x3e>
 5c0:	96 30       	cpi	r25, 0x06	; 6
 5c2:	41 f7       	brne	.-48     	; 0x594 <fsm_ui+0xe>
 5c4:	02 80       	ldd	r0, Z+2	; 0x02
 5c6:	f3 81       	ldd	r31, Z+3	; 0x03
 5c8:	e0 2d       	mov	r30, r0
 5ca:	09 95       	icall
 5cc:	cc 0f       	add	r28, r28
 5ce:	dd 1f       	adc	r29, r29
 5d0:	c0 50       	subi	r28, 0x00	; 0
 5d2:	d0 4c       	sbci	r29, 0xC0	; 192
 5d4:	88 81       	ld	r24, Y
 5d6:	99 81       	ldd	r25, Y+1	; 0x01
 5d8:	fc 01       	movw	r30, r24
 5da:	e0 0f       	add	r30, r16
 5dc:	f1 1f       	adc	r31, r17
 5de:	81 81       	ldd	r24, Z+1	; 0x01
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	08 95       	ret

000005ea <main>:
key get_key(unsigned char);

int main(void)
{
	/* Configure ADC */
	adc_init();
 5ea:	0e 94 9b 00 	call	0x136	; 0x136 <adc_init>

	/* Configure lcd display */
	init_lcd_dog();
 5ee:	0e 94 27 01 	call	0x24e	; 0x24e <init_lcd_dog>
	
	/* Configure SPI for DS1306 RTC */
	SPI_rtc_ds1306_config();
 5f2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <SPI_rtc_ds1306_config>
	
	/* Configure usart3 */		
	USART3.BAUD = (64 * F_CPU)/(16 * BAUD_RATE);																		// set baud rate.
 5f6:	e0 e6       	ldi	r30, 0x60	; 96
 5f8:	f8 e0       	ldi	r31, 0x08	; 8
 5fa:	82 e8       	ldi	r24, 0x82	; 130
 5fc:	96 e0       	ldi	r25, 0x06	; 6
 5fe:	80 87       	std	Z+8, r24	; 0x08
 600:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;	// Asynchronous mode, no parity bits, single stop bit, 8 bits data.
 602:	83 e0       	ldi	r24, 0x03	; 3
 604:	87 83       	std	Z+7, r24	; 0x07
	USART3.CTRLB = USART_RXEN_bm;																						// enable transmission, enable receiving.
 606:	80 e8       	ldi	r24, 0x80	; 128
 608:	86 83       	std	Z+6, r24	; 0x06
	USART3.CTRLA = USART_RXCIE_bm;
 60a:	85 83       	std	Z+5, r24	; 0x05
	
	/* Configure interrupt for DS1306 1Hz output */
	PORTC.DIRCLR |= PIN2_bm;																							// enable input on PC2.
 60c:	e0 e4       	ldi	r30, 0x40	; 64
 60e:	f4 e0       	ldi	r31, 0x04	; 4
 610:	82 81       	ldd	r24, Z+2	; 0x02
 612:	84 60       	ori	r24, 0x04	; 4
 614:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN2CTRL = PORT_ISC_LEVEL_gc;																					// enable interrupt on PC2.
 616:	85 e0       	ldi	r24, 0x05	; 5
 618:	82 8b       	std	Z+18, r24	; 0x12

	write_line(1, "hello");
 61a:	66 eb       	ldi	r22, 0xB6	; 182
 61c:	70 e4       	ldi	r23, 0x40	; 64
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
	dig = 0;
 626:	10 92 bc 40 	sts	0x40BC, r1	; 0x8040bc <__data_end>
 62a:	10 92 bd 40 	sts	0x40BD, r1	; 0x8040bd <__data_end+0x1>
	
	sei();																												// enable global interrupts	
 62e:	78 94       	sei
	
    while (1) 
    {
		asm volatile ("nop");
 630:	00 00       	nop
 632:	fe cf       	rjmp	.-4      	; 0x630 <main+0x46>

00000634 <__vector_30>:
	if ((USART3.STATUS & USART_RXCIF_bm) == USART_RXCIF_bm) {
		present_state = fsm_ui(present_state, get_key(USART3.RXDATAL));
	}
}

ISR (PORTC_PORT_vect) {
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	0b b6       	in	r0, 0x3b	; 59
 640:	0f 92       	push	r0
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	2f 93       	push	r18
 648:	3f 93       	push	r19
 64a:	4f 93       	push	r20
 64c:	5f 93       	push	r21
 64e:	6f 93       	push	r22
 650:	7f 93       	push	r23
 652:	8f 93       	push	r24
 654:	9f 93       	push	r25
 656:	af 93       	push	r26
 658:	bf 93       	push	r27
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	ef 93       	push	r30
 660:	ff 93       	push	r31
	/* display time */
	char* _time = bcd2int(read_RTC(HOUR_addr) | 0x3F);
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 66a:	8f 63       	ori	r24, 0x3F	; 63
 66c:	0e 94 36 02 	call	0x46c	; 0x46c <bcd2int>
 670:	ec 01       	movw	r28, r24
	strncat(_time, (char*) ":", 1);
 672:	fc 01       	movw	r30, r24
 674:	01 90       	ld	r0, Z+
 676:	00 20       	and	r0, r0
 678:	e9 f7       	brne	.-6      	; 0x674 <__vector_30+0x40>
 67a:	31 97       	sbiw	r30, 0x01	; 1
 67c:	0a e3       	ldi	r16, 0x3A	; 58
 67e:	10 e0       	ldi	r17, 0x00	; 0
 680:	00 83       	st	Z, r16
 682:	11 83       	std	Z+1, r17	; 0x01
	strncat(_time, bcd2int(read_RTC(MIN_addr)), 8);
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 68c:	0e 94 36 02 	call	0x46c	; 0x46c <bcd2int>
 690:	48 e0       	ldi	r20, 0x08	; 8
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	bc 01       	movw	r22, r24
 696:	ce 01       	movw	r24, r28
 698:	0e 94 33 04 	call	0x866	; 0x866 <strncat>
	strncat(_time, (char*) ":", 1);
 69c:	fe 01       	movw	r30, r28
 69e:	01 90       	ld	r0, Z+
 6a0:	00 20       	and	r0, r0
 6a2:	e9 f7       	brne	.-6      	; 0x69e <__vector_30+0x6a>
 6a4:	31 97       	sbiw	r30, 0x01	; 1
 6a6:	00 83       	st	Z, r16
 6a8:	11 83       	std	Z+1, r17	; 0x01
	strncat(_time, bcd2int(read_RTC(SEC_addr)), 8);
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 ef 01 	call	0x3de	; 0x3de <read_RTC>
 6b2:	0e 94 36 02 	call	0x46c	; 0x46c <bcd2int>
 6b6:	48 e0       	ldi	r20, 0x08	; 8
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	bc 01       	movw	r22, r24
 6bc:	ce 01       	movw	r24, r28
 6be:	0e 94 33 04 	call	0x866	; 0x866 <strncat>
	
	write_line(1, _time);
 6c2:	be 01       	movw	r22, r28
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
	PORTC.INTFLAGS |= PIN2_bm;
 6cc:	e0 e4       	ldi	r30, 0x40	; 64
 6ce:	f4 e0       	ldi	r31, 0x04	; 4
 6d0:	81 85       	ldd	r24, Z+9	; 0x09
 6d2:	84 60       	ori	r24, 0x04	; 4
 6d4:	81 87       	std	Z+9, r24	; 0x09
}
 6d6:	ff 91       	pop	r31
 6d8:	ef 91       	pop	r30
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	bf 91       	pop	r27
 6e0:	af 91       	pop	r26
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	7f 91       	pop	r23
 6e8:	6f 91       	pop	r22
 6ea:	5f 91       	pop	r21
 6ec:	4f 91       	pop	r20
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	0f 90       	pop	r0
 6f8:	0b be       	out	0x3b, r0	; 59
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <__vector_26>:

ISR (ADC0_RESRDY_vect) {
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	0b b6       	in	r0, 0x3b	; 59
 710:	0f 92       	push	r0
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	4f 93       	push	r20
 718:	5f 93       	push	r21
 71a:	6f 93       	push	r22
 71c:	7f 93       	push	r23
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	af 93       	push	r26
 724:	bf 93       	push	r27
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
	/* display temp */
	uint16_t data = ADC0.RES;
 72a:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 72e:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
	int temp = convert(data);
 732:	0e 94 a3 00 	call	0x146	; 0x146 <convert>
	write_line(2, bin2ascii(temp));
 736:	0e 94 b4 00 	call	0x168	; 0x168 <bin2ascii>
 73a:	bc 01       	movw	r22, r24
 73c:	82 e0       	ldi	r24, 0x02	; 2
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 a4 01 	call	0x348	; 0x348 <write_line>
}
 744:	ff 91       	pop	r31
 746:	ef 91       	pop	r30
 748:	bf 91       	pop	r27
 74a:	af 91       	pop	r26
 74c:	9f 91       	pop	r25
 74e:	8f 91       	pop	r24
 750:	7f 91       	pop	r23
 752:	6f 91       	pop	r22
 754:	5f 91       	pop	r21
 756:	4f 91       	pop	r20
 758:	3f 91       	pop	r19
 75a:	2f 91       	pop	r18
 75c:	0f 90       	pop	r0
 75e:	0b be       	out	0x3b, r0	; 59
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <get_key>:

key get_key(unsigned char c)
{
	if (c == 's') return s;
 76a:	83 37       	cpi	r24, 0x73	; 115
 76c:	a9 f0       	breq	.+42     	; 0x798 <get_key+0x2e>
	else if (c == 'h') return h;
 76e:	88 36       	cpi	r24, 0x68	; 104
 770:	a9 f0       	breq	.+42     	; 0x79c <get_key+0x32>
	else if (c == 'm') return m;
 772:	8d 36       	cpi	r24, 0x6D	; 109
 774:	a9 f0       	breq	.+42     	; 0x7a0 <get_key+0x36>
	else if (c == 'e') return e;
 776:	85 36       	cpi	r24, 0x65	; 101
 778:	a9 f0       	breq	.+42     	; 0x7a4 <get_key+0x3a>
	else if (c >= '0' && c <= '9')
 77a:	90 ed       	ldi	r25, 0xD0	; 208
 77c:	98 0f       	add	r25, r24
 77e:	9a 30       	cpi	r25, 0x0A	; 10
 780:	38 f4       	brcc	.+14     	; 0x790 <get_key+0x26>
	{
		dig = (int) c;
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	80 93 bc 40 	sts	0x40BC, r24	; 0x8040bc <__data_end>
 788:	90 93 bd 40 	sts	0x40BD, r25	; 0x8040bd <__data_end+0x1>
		return digit;
 78c:	84 e0       	ldi	r24, 0x04	; 4
 78e:	08 95       	ret
	}
	else if (c == 0x0D) return enter;
 790:	8d 30       	cpi	r24, 0x0D	; 13
 792:	51 f4       	brne	.+20     	; 0x7a8 <get_key+0x3e>
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	08 95       	ret
	write_line(2, bin2ascii(temp));
}

key get_key(unsigned char c)
{
	if (c == 's') return s;
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	08 95       	ret
	else if (c == 'h') return h;
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	08 95       	ret
	else if (c == 'm') return m;
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	08 95       	ret
	else if (c == 'e') return e;
 7a4:	83 e0       	ldi	r24, 0x03	; 3
 7a6:	08 95       	ret
	{
		dig = (int) c;
		return digit;
	}
	else if (c == 0x0D) return enter;
	else return eol;
 7a8:	86 e0       	ldi	r24, 0x06	; 6
}
 7aa:	08 95       	ret

000007ac <__vector_53>:
    {
		asm volatile ("nop");
    }
}

ISR (USART3_RXC_vect) {
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	0b b6       	in	r0, 0x3b	; 59
 7b8:	0f 92       	push	r0
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	5f 93       	push	r21
 7c2:	6f 93       	push	r22
 7c4:	7f 93       	push	r23
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
	if ((USART3.STATUS & USART_RXCIF_bm) == USART_RXCIF_bm) {
 7d2:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 7d6:	88 23       	and	r24, r24
 7d8:	5c f4       	brge	.+22     	; 0x7f0 <__vector_53+0x44>
		present_state = fsm_ui(present_state, get_key(USART3.RXDATAL));
 7da:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
 7de:	0e 94 b5 03 	call	0x76a	; 0x76a <get_key>
 7e2:	68 2f       	mov	r22, r24
 7e4:	80 91 bf 40 	lds	r24, 0x40BF	; 0x8040bf <present_state>
 7e8:	0e 94 c3 02 	call	0x586	; 0x586 <fsm_ui>
 7ec:	80 93 bf 40 	sts	0x40BF, r24	; 0x8040bf <present_state>
	}
}
 7f0:	ff 91       	pop	r31
 7f2:	ef 91       	pop	r30
 7f4:	bf 91       	pop	r27
 7f6:	af 91       	pop	r26
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	7f 91       	pop	r23
 7fe:	6f 91       	pop	r22
 800:	5f 91       	pop	r21
 802:	4f 91       	pop	r20
 804:	3f 91       	pop	r19
 806:	2f 91       	pop	r18
 808:	0f 90       	pop	r0
 80a:	0b be       	out	0x3b, r0	; 59
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <__divmodhi4>:
 816:	97 fb       	bst	r25, 7
 818:	07 2e       	mov	r0, r23
 81a:	16 f4       	brtc	.+4      	; 0x820 <__divmodhi4+0xa>
 81c:	00 94       	com	r0
 81e:	07 d0       	rcall	.+14     	; 0x82e <__divmodhi4_neg1>
 820:	77 fd       	sbrc	r23, 7
 822:	09 d0       	rcall	.+18     	; 0x836 <__divmodhi4_neg2>
 824:	0e 94 1f 04 	call	0x83e	; 0x83e <__udivmodhi4>
 828:	07 fc       	sbrc	r0, 7
 82a:	05 d0       	rcall	.+10     	; 0x836 <__divmodhi4_neg2>
 82c:	3e f4       	brtc	.+14     	; 0x83c <__divmodhi4_exit>

0000082e <__divmodhi4_neg1>:
 82e:	90 95       	com	r25
 830:	81 95       	neg	r24
 832:	9f 4f       	sbci	r25, 0xFF	; 255
 834:	08 95       	ret

00000836 <__divmodhi4_neg2>:
 836:	70 95       	com	r23
 838:	61 95       	neg	r22
 83a:	7f 4f       	sbci	r23, 0xFF	; 255

0000083c <__divmodhi4_exit>:
 83c:	08 95       	ret

0000083e <__udivmodhi4>:
 83e:	aa 1b       	sub	r26, r26
 840:	bb 1b       	sub	r27, r27
 842:	51 e1       	ldi	r21, 0x11	; 17
 844:	07 c0       	rjmp	.+14     	; 0x854 <__udivmodhi4_ep>

00000846 <__udivmodhi4_loop>:
 846:	aa 1f       	adc	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	a6 17       	cp	r26, r22
 84c:	b7 07       	cpc	r27, r23
 84e:	10 f0       	brcs	.+4      	; 0x854 <__udivmodhi4_ep>
 850:	a6 1b       	sub	r26, r22
 852:	b7 0b       	sbc	r27, r23

00000854 <__udivmodhi4_ep>:
 854:	88 1f       	adc	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	5a 95       	dec	r21
 85a:	a9 f7       	brne	.-22     	; 0x846 <__udivmodhi4_loop>
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	bc 01       	movw	r22, r24
 862:	cd 01       	movw	r24, r26
 864:	08 95       	ret

00000866 <strncat>:
 866:	fb 01       	movw	r30, r22
 868:	dc 01       	movw	r26, r24
 86a:	0d 90       	ld	r0, X+
 86c:	00 20       	and	r0, r0
 86e:	e9 f7       	brne	.-6      	; 0x86a <strncat+0x4>
 870:	11 97       	sbiw	r26, 0x01	; 1
 872:	41 50       	subi	r20, 0x01	; 1
 874:	50 40       	sbci	r21, 0x00	; 0
 876:	28 f0       	brcs	.+10     	; 0x882 <strncat+0x1c>
 878:	01 90       	ld	r0, Z+
 87a:	00 20       	and	r0, r0
 87c:	0d 92       	st	X+, r0
 87e:	c9 f7       	brne	.-14     	; 0x872 <strncat+0xc>
 880:	08 95       	ret
 882:	1c 92       	st	X, r1
 884:	08 95       	ret

00000886 <strncpy>:
 886:	fb 01       	movw	r30, r22
 888:	dc 01       	movw	r26, r24
 88a:	41 50       	subi	r20, 0x01	; 1
 88c:	50 40       	sbci	r21, 0x00	; 0
 88e:	48 f0       	brcs	.+18     	; 0x8a2 <strncpy+0x1c>
 890:	01 90       	ld	r0, Z+
 892:	0d 92       	st	X+, r0
 894:	00 20       	and	r0, r0
 896:	c9 f7       	brne	.-14     	; 0x88a <strncpy+0x4>
 898:	01 c0       	rjmp	.+2      	; 0x89c <strncpy+0x16>
 89a:	1d 92       	st	X+, r1
 89c:	41 50       	subi	r20, 0x01	; 1
 89e:	50 40       	sbci	r21, 0x00	; 0
 8a0:	e0 f7       	brcc	.-8      	; 0x89a <strncpy+0x14>
 8a2:	08 95       	ret

000008a4 <_exit>:
 8a4:	f8 94       	cli

000008a6 <__stop_program>:
 8a6:	ff cf       	rjmp	.-2      	; 0x8a6 <__stop_program>
