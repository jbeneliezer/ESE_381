
interrupt_echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00804000  00804000  00000290  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000347c  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ea2  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b4  00000000  00000000  00006656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00006b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001814  00000000  00000000  00006ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035b  00000000  00000000  000083bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00008717  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_45>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a1 30       	cpi	r26, 0x01	; 1
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
 114:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <main>:

char c;

int main(void)
{
	PORTB.DIRCLR = PIN1_bm;													// set PB1 as input.
 11c:	e0 e2       	ldi	r30, 0x20	; 32
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN1CTRL |= PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm;				// enable interrupt on falling edge of PB1.
 124:	81 89       	ldd	r24, Z+17	; 0x11
 126:	8b 60       	ori	r24, 0x0B	; 11
 128:	81 8b       	std	Z+17, r24	; 0x11
	sei();																	// enable global interrupts.
 12a:	78 94       	sei
	
    while (1) 
    {
		asm volatile ("nop");												// nop to avoid optimization deletion of while loop.
 12c:	00 00       	nop
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x10>

00000130 <USART_sw_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	24 e4       	ldi	r18, 0x44	; 68
 132:	2a 95       	dec	r18
 134:	f1 f7       	brne	.-4      	; 0x132 <USART_sw_read+0x2>
	} else return 0x00;

	uint8_t data = 0;

	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
 136:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 13a:	81 fd       	sbrc	r24, 1
 13c:	1f c0       	rjmp	.+62     	; 0x17c <USART_sw_read+0x4c>
 13e:	88 e8       	ldi	r24, 0x88	; 136
 140:	8a 95       	dec	r24
 142:	f1 f7       	brne	.-4      	; 0x140 <USART_sw_read+0x10>
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 144:	90 e0       	ldi	r25, 0x00	; 0
		d = 102;
	} else if (BAUD_RATE == 19200UL) {
		d = 50;
	} else return 0x00;

	uint8_t data = 0;
 146:	80 e0       	ldi	r24, 0x00	; 0
	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 148:	13 c0       	rjmp	.+38     	; 0x170 <USART_sw_read+0x40>
		data = (data >> 1) | ((PORTB_IN & PIN1_bm) << 6);					// read little endian input into data.
 14a:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 14e:	22 70       	andi	r18, 0x02	; 2
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	00 24       	eor	r0, r0
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	07 94       	ror	r0
 15a:	36 95       	lsr	r19
 15c:	27 95       	ror	r18
 15e:	07 94       	ror	r0
 160:	32 2f       	mov	r19, r18
 162:	20 2d       	mov	r18, r0
 164:	86 95       	lsr	r24
 166:	82 2b       	or	r24, r18
 168:	28 e8       	ldi	r18, 0x88	; 136
 16a:	2a 95       	dec	r18
 16c:	f1 f7       	brne	.-4      	; 0x16a <USART_sw_read+0x3a>
	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 16e:	9f 5f       	subi	r25, 0xFF	; 255
 170:	98 30       	cpi	r25, 0x08	; 8
 172:	58 f3       	brcs	.-42     	; 0x14a <USART_sw_read+0x1a>
 174:	94 e4       	ldi	r25, 0x44	; 68
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <USART_sw_read+0x46>
		_delay_us(d);														// delay for bit time.
	}
	
	_delay_us(d/2);

	return data;
 17a:	08 95       	ret
	} else return 0x00;

	uint8_t data = 0;

	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
 17c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	_delay_us(d/2);

	return data;
}
 17e:	08 95       	ret

00000180 <USART_sw_write>:

void USART_sw_write(char c) {
	PORTB.DIRSET = PIN0_bm;													// set PB0 as output.
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
		d = 50;
	} else return;

	uint8_t data = (uint8_t) c;

	PORTB_OUT = 0x00 | PIN0_bm;												// send start bit.
 186:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 18a:	28 e8       	ldi	r18, 0x88	; 136
 18c:	2a 95       	dec	r18
 18e:	f1 f7       	brne	.-4      	; 0x18c <USART_sw_write+0xc>
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; i++) {
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <USART_sw_write+0x26>
		PORTB_OUT = data & PIN0_bm;											// send lsb of data.
 194:	28 2f       	mov	r18, r24
 196:	21 70       	andi	r18, 0x01	; 1
 198:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
		data >>= 1;															// shift data right.
 19c:	86 95       	lsr	r24
 19e:	28 e8       	ldi	r18, 0x88	; 136
 1a0:	2a 95       	dec	r18
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <USART_sw_write+0x20>

	PORTB_OUT = 0x00 | PIN0_bm;												// send start bit.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; i++) {
 1a4:	9f 5f       	subi	r25, 0xFF	; 255
 1a6:	98 30       	cpi	r25, 0x08	; 8
 1a8:	a8 f3       	brcs	.-22     	; 0x194 <USART_sw_write+0x14>
		PORTB_OUT = data & PIN0_bm;											// send lsb of data.
		data >>= 1;															// shift data right.
		_delay_us(d);														// delay for bit time.
	}

	PORTB_OUT = PIN0_bm;													// send end bit.
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 1b0:	88 e8       	ldi	r24, 0x88	; 136
 1b2:	8a 95       	dec	r24
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <USART_sw_write+0x32>
 1b6:	08 95       	ret

000001b8 <__vector_45>:
    {
		asm volatile ("nop");												// nop to avoid optimization deletion of while loop.
    }
}

ISR (PORTB_PORT_vect) {
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	0b b6       	in	r0, 0x3b	; 59
 1c4:	0f 92       	push	r0
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	c = USART_sw_read();
 1de:	0e 94 98 00 	call	0x130	; 0x130 <USART_sw_read>
 1e2:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
  	USART_sw_write(c - 0x20);												// write uppercase c.
 1e6:	80 52       	subi	r24, 0x20	; 32
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <USART_sw_write>
	PORTB.INTFLAGS = PIN1_bm;												// clear interrupt.
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
}
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	bf 91       	pop	r27
 1f8:	af 91       	pop	r26
 1fa:	9f 91       	pop	r25
 1fc:	8f 91       	pop	r24
 1fe:	7f 91       	pop	r23
 200:	6f 91       	pop	r22
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	3f 91       	pop	r19
 208:	2f 91       	pop	r18
 20a:	0f 90       	pop	r0
 20c:	0b be       	out	0x3b, r0	; 59
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
