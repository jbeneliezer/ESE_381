
interrupt_echo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00804000  00804000  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003440  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eb1  00000000  00000000  00003768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048f  00000000  00000000  00006619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00006aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000182d  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  00008371  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00008657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_45>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a1 30       	cpi	r26, 0x01	; 1
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
 114:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <main>:

char c;

int main(void)
{
	PORTB.DIRCLR = PIN1_bm;													// set PB1 as input.
 11c:	e0 e2       	ldi	r30, 0x20	; 32
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN1CTRL |= PORT_ISC_FALLING_gc;									// enable interrupt on falling edge of PB1.
 124:	81 89       	ldd	r24, Z+17	; 0x11
 126:	83 60       	ori	r24, 0x03	; 3
 128:	81 8b       	std	Z+17, r24	; 0x11
	sei();																	// enable global interrupts.
 12a:	78 94       	sei
	
    while (1) 
    {
		asm volatile ("nop");												// nop to avoid optimization deletion of while loop.
 12c:	00 00       	nop
 12e:	fe cf       	rjmp	.-4      	; 0x12c <main+0x10>

00000130 <USART_sw_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <USART_sw_read+0x2>
	} else return 0x00;

	uint8_t data = 0;

	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) != 0) return 0x00;								// check for false start.
 136:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 13a:	81 fd       	sbrc	r24, 1
 13c:	0d c0       	rjmp	.+26     	; 0x158 <USART_sw_read+0x28>
 13e:	90 e4       	ldi	r25, 0x40	; 64
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <USART_sw_read+0x10>
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	06 c0       	rjmp	.+12     	; 0x154 <USART_sw_read+0x24>
		data >>= data | ((PORTB_IN | PIN1_bm) << 6);						// read little endian input into data.
 148:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 14c:	90 e4       	ldi	r25, 0x40	; 64
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <USART_sw_read+0x1e>
	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) != 0) return 0x00;								// check for false start.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	c0 f3       	brcs	.-16     	; 0x148 <USART_sw_read+0x18>
		data >>= data | ((PORTB_IN | PIN1_bm) << 6);						// read little endian input into data.
		_delay_us(d);														// delay for bit time.
	}

	return data;
}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <USART_sw_write>:

void USART_sw_write(char c) {
	PORTB.DIRSET = PIN0_bm;													// set PB0 as output.
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
		d = 201;
	} else return;

	uint8_t data = (uint8_t) c;

	PORTB_OUT = 0x00 | PIN0_bm;												// send start bit.
 162:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 166:	60 e4       	ldi	r22, 0x40	; 64
 168:	6a 95       	dec	r22
 16a:	f1 f7       	brne	.-4      	; 0x168 <USART_sw_write+0xc>
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	11 c0       	rjmp	.+34     	; 0x192 <USART_sw_write+0x36>
		PORTB_OUT = data | PIN0_bm;											// send lsb of data.
 170:	98 2f       	mov	r25, r24
 172:	91 60       	ori	r25, 0x01	; 1
 174:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
		data >>= data;														// shift data right.
 178:	28 2f       	mov	r18, r24
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <USART_sw_write+0x28>
 180:	75 95       	asr	r23
 182:	67 95       	ror	r22
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <USART_sw_write+0x24>
 188:	cb 01       	movw	r24, r22
 18a:	70 e4       	ldi	r23, 0x40	; 64
 18c:	7a 95       	dec	r23
 18e:	f1 f7       	brne	.-4      	; 0x18c <USART_sw_write+0x30>

	PORTB_OUT = 0x00 | PIN0_bm;												// send start bit.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 190:	4f 5f       	subi	r20, 0xFF	; 255
 192:	48 30       	cpi	r20, 0x08	; 8
 194:	68 f3       	brcs	.-38     	; 0x170 <USART_sw_write+0x14>
		PORTB_OUT = data | PIN0_bm;											// send lsb of data.
		data >>= data;														// shift data right.
		_delay_us(d);														// delay for bit time.
	}

	PORTB_OUT = PIN0_bm;													// send end bit.
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <USART_sw_write+0x42>
 1a2:	08 95       	ret

000001a4 <__vector_45>:
    {
		asm volatile ("nop");												// nop to avoid optimization deletion of while loop.
    }
}

ISR (PORTB_PORT_vect) {
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	0b b6       	in	r0, 0x3b	; 59
 1b0:	0f 92       	push	r0
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	c = USART_sw_read();													// call USART_sw_read.
 1ca:	0e 94 98 00 	call	0x130	; 0x130 <USART_sw_read>
 1ce:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	USART_sw_write(c - 0x20);												// write uppercase c.
 1d2:	80 52       	subi	r24, 0x20	; 32
 1d4:	0e 94 ae 00 	call	0x15c	; 0x15c <USART_sw_write>
	PORTB.INTFLAGS |= PIN1_bm;												// clear interupt.
 1d8:	e0 e2       	ldi	r30, 0x20	; 32
 1da:	f4 e0       	ldi	r31, 0x04	; 4
 1dc:	81 85       	ldd	r24, Z+9	; 0x09
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	81 87       	std	Z+9, r24	; 0x09
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0b be       	out	0x3b, r0	; 59
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
