
interrupt_echo_line.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00804000  00804000  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003477  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002eba  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b6  00000000  00000000  000066a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00006b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000181e  00000000  00000000  00006c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000319  00000000  00000000  00008422  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000873b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_45>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a1 35       	cpi	r26, 0x51	; 81
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
 114:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <main>:
char c[80];																	// buffer.
uint8_t i = 0;

int main(void)
{
	PORTB.DIRCLR = PIN1_bm;													// set PB1 as input.
 11c:	e0 e2       	ldi	r30, 0x20	; 32
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN1CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm;				// enable interrupt on falling edge of PB1.
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	81 8b       	std	Z+17, r24	; 0x11
	sei();																	// enable global interrupts.
 128:	78 94       	sei
	
    while (1) 
    {
		asm volatile ("nop");												// nop to avoid optimization deletion of while loop.
 12a:	00 00       	nop
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0xe>

0000012e <USART_sw_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <USART_sw_read+0x2>
	} else return 0x00;

	uint8_t data = 0;

	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
 134:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 138:	81 fd       	sbrc	r24, 1
 13a:	13 c0       	rjmp	.+38     	; 0x162 <USART_sw_read+0x34>
 13c:	ec ec       	ldi	r30, 0xCC	; 204
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <USART_sw_read+0x12>
 144:	00 c0       	rjmp	.+0      	; 0x146 <USART_sw_read+0x18>
 146:	00 00       	nop
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	09 c0       	rjmp	.+18     	; 0x15e <USART_sw_read+0x30>
		data >>= data | ((PORTB_IN | PIN1_bm) << 6);						// read little endian input into data.
 14c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 150:	ec ec       	ldi	r30, 0xCC	; 204
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <USART_sw_read+0x26>
 158:	00 c0       	rjmp	.+0      	; 0x15a <USART_sw_read+0x2c>
 15a:	00 00       	nop
	_delay_us(d/2);													
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	a8 f3       	brcs	.-22     	; 0x14c <USART_sw_read+0x1e>
		data >>= data | ((PORTB_IN | PIN1_bm) << 6);						// read little endian input into data.
		_delay_us(d);														// delay for bit time.
	}

	return data;
}
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret

00000166 <USART_sw_write>:

void USART_sw_write(char c) {
	PORTB.DIRSET = PIN0_bm;													// set PB0 as output.
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
		d = 50;
	} else return;

	uint8_t data = (uint8_t) c;

	PORTB_OUT = 0x00 | PIN0_bm;												// send start bit.
 16c:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 170:	ec ec       	ldi	r30, 0xCC	; 204
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <USART_sw_write+0xe>
 178:	00 c0       	rjmp	.+0      	; 0x17a <USART_sw_write+0x14>
 17a:	00 00       	nop
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0c c0       	rjmp	.+24     	; 0x198 <USART_sw_write+0x32>
		PORTB_OUT = data | PIN0_bm;											// send lsb of data.
 180:	28 2f       	mov	r18, r24
 182:	21 60       	ori	r18, 0x01	; 1
 184:	20 93 24 04 	sts	0x0424, r18	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
		data >>= 1;															// shift data right.
 188:	86 95       	lsr	r24
 18a:	ec ec       	ldi	r30, 0xCC	; 204
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <USART_sw_write+0x28>
 192:	00 c0       	rjmp	.+0      	; 0x194 <USART_sw_write+0x2e>
 194:	00 00       	nop

	PORTB_OUT = 0x00 | PIN0_bm;												// send start bit.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 196:	9f 5f       	subi	r25, 0xFF	; 255
 198:	98 30       	cpi	r25, 0x08	; 8
 19a:	90 f3       	brcs	.-28     	; 0x180 <USART_sw_write+0x1a>
		PORTB_OUT = data | PIN0_bm;											// send lsb of data.
		data >>= 1;															// shift data right.
		_delay_us(d);														// delay for bit time.
	}

	PORTB_OUT = PIN0_bm;													// send end bit.
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 1a2:	8c ec       	ldi	r24, 0xCC	; 204
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <USART_sw_write+0x40>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <USART_sw_write+0x46>
 1ac:	00 00       	nop
 1ae:	08 95       	ret

000001b0 <__vector_45>:
    {
		asm volatile ("nop");												// nop to avoid optimization deletion of while loop.
    }
}

ISR (PORTB_PORT_vect) {
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	0b b6       	in	r0, 0x3b	; 59
 1bc:	0f 92       	push	r0
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	c[i++] = USART_sw_read();												// call USART_sw_read.
 1da:	c0 91 00 40 	lds	r28, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	8c 0f       	add	r24, r28
 1e2:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	0e 94 97 00 	call	0x12e	; 0x12e <USART_sw_read>
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
 1ee:	df 4b       	sbci	r29, 0xBF	; 191
 1f0:	88 83       	st	Y, r24
	if (c[i] == 0x0D) {														// check for CR.
 1f2:	e0 91 00 40 	lds	r30, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ef 5f       	subi	r30, 0xFF	; 255
 1fa:	ff 4b       	sbci	r31, 0xBF	; 191
 1fc:	80 81       	ld	r24, Z
 1fe:	8d 30       	cpi	r24, 0x0D	; 13
 200:	89 f4       	brne	.+34     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 202:	09 c0       	rjmp	.+18     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
		uint8_t j;
		for (j = 0; j <= i; ++j) {
			USART_sw_write(c[j]);											// write line.
 204:	ec 2f       	mov	r30, r28
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ef 5f       	subi	r30, 0xFF	; 255
 20a:	ff 4b       	sbci	r31, 0xBF	; 191
 20c:	80 81       	ld	r24, Z
 20e:	0e 94 b3 00 	call	0x166	; 0x166 <USART_sw_write>

ISR (PORTB_PORT_vect) {
	c[i++] = USART_sw_read();												// call USART_sw_read.
	if (c[i] == 0x0D) {														// check for CR.
		uint8_t j;
		for (j = 0; j <= i; ++j) {
 212:	cf 5f       	subi	r28, 0xFF	; 255
 214:	01 c0       	rjmp	.+2      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 21c:	8c 17       	cp	r24, r28
 21e:	90 f7       	brcc	.-28     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
			USART_sw_write(c[j]);											// write line.
		}
		i = 0;																// clear buffer
 220:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
	}
	PORTB.INTFLAGS |= PIN1_bm;												// clear interrupt.
 224:	e0 e2       	ldi	r30, 0x20	; 32
 226:	f4 e0       	ldi	r31, 0x04	; 4
 228:	81 85       	ldd	r24, Z+9	; 0x09
 22a:	82 60       	ori	r24, 0x02	; 2
 22c:	81 87       	std	Z+9, r24	; 0x09
}
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0b be       	out	0x3b, r0	; 59
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
