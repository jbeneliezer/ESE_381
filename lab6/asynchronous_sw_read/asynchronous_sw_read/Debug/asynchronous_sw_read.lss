
asynchronous_sw_read.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00804000  00804000  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003312  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e47  00000000  00000000  000035ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041a  00000000  00000000  000063f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00006810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000177f  00000000  00000000  00006844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000145  00000000  00000000  00007fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00008108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a1 30       	cpi	r26, 0x01	; 1
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 c1 00 	call	0x182	; 0x182 <main>
 114:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <USART_sw_read>:
		c = (char) USART_sw_read();										// read UART input to c.
    }
}

uint8_t USART_sw_read() {
	PORTB.DIRCLR = PIN1_bm;												// PB1 set as input.
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <__TEXT_REGION_LENGTH__+0x7e0422>
	} else if (BAUD_RATE == 19200L) {
		d = 50;
	} else return 0x00;

	uint8_t data = 0;
	uint8_t reading = 1;
 122:	21 e0       	ldi	r18, 0x01	; 1
		d = 102;
	} else if (BAUD_RATE == 19200L) {
		d = 50;
	} else return 0x00;

	uint8_t data = 0;
 124:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t reading = 1;

	while (reading == 1) {
 126:	2a c0       	rjmp	.+84     	; 0x17c <USART_sw_read+0x60>
		while ((PORTB_IN & PIN1_bm) == 1) {}								// wait for falling edge.
 128:	e8 e2       	ldi	r30, 0x28	; 40
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	90 81       	ld	r25, Z
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	98 e8       	ldi	r25, 0x88	; 136
 130:	9a 95       	dec	r25
 132:	f1 f7       	brne	.-4      	; 0x130 <USART_sw_read+0x14>
		_delay_us(d/2);
		if ((PORTB_IN & PIN1_bm) != 0) continue;							// check for false start.
 134:	90 81       	ld	r25, Z
 136:	91 fd       	sbrc	r25, 1
 138:	21 c0       	rjmp	.+66     	; 0x17c <USART_sw_read+0x60>
 13a:	ec ec       	ldi	r30, 0xCC	; 204
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <USART_sw_read+0x22>
 142:	00 c0       	rjmp	.+0      	; 0x144 <USART_sw_read+0x28>
 144:	00 00       	nop
		_delay_us(d);														// delay for bit time.

		uint8_t i = 0;
 146:	90 e0       	ldi	r25, 0x00	; 0
		for (; i < 8; ++i) {
 148:	16 c0       	rjmp	.+44     	; 0x176 <USART_sw_read+0x5a>
			data = (data >> 1) | ((PORTB_IN & PIN1_bm) << 6);						// read little endian input.
 14a:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 14e:	22 70       	andi	r18, 0x02	; 2
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	00 24       	eor	r0, r0
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	07 94       	ror	r0
 15a:	36 95       	lsr	r19
 15c:	27 95       	ror	r18
 15e:	07 94       	ror	r0
 160:	32 2f       	mov	r19, r18
 162:	20 2d       	mov	r18, r0
 164:	86 95       	lsr	r24
 166:	82 2b       	or	r24, r18
 168:	ec ec       	ldi	r30, 0xCC	; 204
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <USART_sw_read+0x50>
 170:	00 c0       	rjmp	.+0      	; 0x172 <USART_sw_read+0x56>
 172:	00 00       	nop
		_delay_us(d/2);
		if ((PORTB_IN & PIN1_bm) != 0) continue;							// check for false start.
		_delay_us(d);														// delay for bit time.

		uint8_t i = 0;
		for (; i < 8; ++i) {
 174:	9f 5f       	subi	r25, 0xFF	; 255
 176:	98 30       	cpi	r25, 0x08	; 8
 178:	40 f3       	brcs	.-48     	; 0x14a <USART_sw_read+0x2e>
			data = (data >> 1) | ((PORTB_IN & PIN1_bm) << 6);						// read little endian input.
			_delay_us(d);													// delay for bit time.
		}
		reading = 0;
 17a:	20 e0       	ldi	r18, 0x00	; 0
	} else return 0x00;

	uint8_t data = 0;
	uint8_t reading = 1;

	while (reading == 1) {
 17c:	21 30       	cpi	r18, 0x01	; 1
 17e:	a1 f2       	breq	.-88     	; 0x128 <USART_sw_read+0xc>
			_delay_us(d);													// delay for bit time.
		}
		reading = 0;
	}
	return data;
}
 180:	08 95       	ret

00000182 <main>:

int main(void)
{
    while (1) 
    {
		c = (char) USART_sw_read();										// read UART input to c.
 182:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_sw_read>
 186:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 18a:	fb cf       	rjmp	.-10     	; 0x182 <main>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
