
asynchronous_sw_read_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00804000  00804000  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003345  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e79  00000000  00000000  00003641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000424  00000000  00000000  000064ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000068e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001825  00000000  00000000  0000696c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00008191  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00008383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_45>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a1 30       	cpi	r26, 0x01	; 1
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
 114:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <main>:

char c;

int main(void)
{
	PORTB.DIRCLR = PIN1_bm;													// set PB1 as input.
 11c:	e0 e2       	ldi	r30, 0x20	; 32
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	82 83       	std	Z+2, r24	; 0x02
	PORTB.PIN1CTRL = PORT_ISC_FALLING_gc;				// enable interrupt on falling edge.
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	81 8b       	std	Z+17, r24	; 0x11
	sei();																	// enable global interrupts.
 128:	78 94       	sei
	
    while (1) 
    {
		asm volatile ("nop");												// nop to avoid optimization deletion.
 12a:	00 00       	nop
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0xe>

0000012e <USART_sw_read>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	8a 95       	dec	r24
 132:	f1 f7       	brne	.-4      	; 0x130 <USART_sw_read+0x2>
	} else if (BAUD_RATE == 19200UL) {
		d = 50;
	} else return 0x00;

	_delay_us(d/2);
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
 134:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 138:	81 fd       	sbrc	r24, 1
 13a:	22 c0       	rjmp	.+68     	; 0x180 <USART_sw_read+0x52>
 13c:	ec ec       	ldi	r30, 0xCC	; 204
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <USART_sw_read+0x12>
 144:	00 c0       	rjmp	.+0      	; 0x146 <USART_sw_read+0x18>
 146:	00 00       	nop
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 148:	90 e0       	ldi	r25, 0x00	; 0
	PORTB.INTFLAGS |= PIN1_bm;												// clear interrupt.
}

uint8_t USART_sw_read() {

	uint8_t d, data = 0x00;
 14a:	80 e0       	ldi	r24, 0x00	; 0
	_delay_us(d/2);
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 14c:	16 c0       	rjmp	.+44     	; 0x17a <USART_sw_read+0x4c>
		data = (data >> 1) | ((PORTB_IN & PIN1_bm) << 6);					// read little endian input into data.
 14e:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 152:	22 70       	andi	r18, 0x02	; 2
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	00 24       	eor	r0, r0
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	07 94       	ror	r0
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	07 94       	ror	r0
 164:	32 2f       	mov	r19, r18
 166:	20 2d       	mov	r18, r0
 168:	86 95       	lsr	r24
 16a:	82 2b       	or	r24, r18
 16c:	ec ec       	ldi	r30, 0xCC	; 204
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <USART_sw_read+0x42>
 174:	00 c0       	rjmp	.+0      	; 0x176 <USART_sw_read+0x48>
 176:	00 00       	nop
	_delay_us(d/2);
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
	_delay_us(d);															// delay for bit time.

	uint8_t i;
	for (i = 0; i < 8; ++i) {
 178:	9f 5f       	subi	r25, 0xFF	; 255
 17a:	98 30       	cpi	r25, 0x08	; 8
 17c:	40 f3       	brcs	.-48     	; 0x14e <USART_sw_read+0x20>
 17e:	08 95       	ret
	} else if (BAUD_RATE == 19200UL) {
		d = 50;
	} else return 0x00;

	_delay_us(d/2);
	if ((PORTB_IN & PIN1_bm) == PIN1_bm) return 0x00;						// check for false start.
 180:	80 e0       	ldi	r24, 0x00	; 0
		data = (data >> 1) | ((PORTB_IN & PIN1_bm) << 6);					// read little endian input into data.
		_delay_us(d);														// delay for bit time.
	}

	return data;
}
 182:	08 95       	ret

00000184 <__vector_45>:
    {
		asm volatile ("nop");												// nop to avoid optimization deletion.
    }
}

ISR (PORTB_PORT_vect) {
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	0b b6       	in	r0, 0x3b	; 59
 190:	0f 92       	push	r0
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	c = USART_sw_read();													// call USART_sw_read.
 1aa:	0e 94 97 00 	call	0x12e	; 0x12e <USART_sw_read>
 1ae:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	PORTB.INTFLAGS |= PIN1_bm;												// clear interrupt.
 1b2:	e0 e2       	ldi	r30, 0x20	; 32
 1b4:	f4 e0       	ldi	r31, 0x04	; 4
 1b6:	81 85       	ldd	r24, Z+9	; 0x09
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	81 87       	std	Z+9, r24	; 0x09
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0b be       	out	0x3b, r0	; 59
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
